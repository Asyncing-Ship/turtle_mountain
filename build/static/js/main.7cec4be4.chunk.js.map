{"version":3,"sources":["Redux/Reducers/userReducer.js","Redux/Reducers/loginModeReducer.js","Redux/Reducers/errorsReducer.js","Redux/Reducers/tasksReducer.js","Redux/Reducers/questionsReducer.js","Redux/Reducers/policyReducer.js","Redux/Reducers/usersReducer.js","Redux/Reducers/notificationReducer.js","Redux/Reducers/toastReducer.js","Redux/Reducers/index.js","Redux/Sagas/loginSaga.js","Redux/Sagas/registrationSaga.js","Redux/Sagas/userSaga.js","Redux/Sagas/tasksSaga.js","Redux/Sagas/questionsSaga.js","Redux/Sagas/policySaga.js","Redux/Sagas/taskTagsSaga.js","Redux/Sagas/toastSaga.js","Redux/Sagas/notificationSaga.js","Redux/Sagas/index.js","style/theme.js","Components/Layout/Navbar/Navbar.jsx","Components/Pages/Login/Login.jsx","Components/Pages/SignUp/SignUp.jsx","Components/Utilities/Unapproved/Unapproved.js","Components/Utilities/ProtectedRoute/ProtectedRoute.js","Components/Pages/Home/Home.js","Components/Pages/ViewsTask/TaskBadge.js","Components/Pages/ViewsTask/TaskButtons/EditTask.js","Components/Pages/ViewsTask/TaskButtons/DeleteTask.js","Components/Pages/ViewsTask/TaskButtons/AcceptTask.js","Components/Pages/ViewsTask/OpenTask.js","Components/Pages/ViewsTask/CompleteTask.js","Components/Pages/ViewsTask/MyTask.js","Components/Pages/ViewsTask/SearchTask.js","Components/Pages/ViewsTask/NewTask.js","Components/Pages/ViewsTask/TaskEditView.js","Components/Pages/ViewsTask/TaskPage.js","Components/Pages/ViewsQuestion/AnswerQuestion.js","Components/Pages/ViewsQuestion/Response.js","Components/Pages/ViewsQuestion/QuestionBadge.js","Components/Pages/ViewsQuestion/QuestionButtons/DeleteQuestion.js","Components/Pages/ViewsQuestion/RecentQuestions.js","Components/Pages/ViewsQuestion/UnansweredQuestions.js","Components/Pages/ViewsQuestion/SearchQuestions.js","Components/Pages/ViewsQuestion/NewQuestion.js","Components/Pages/ViewsQuestion/FrequentlyAsked.js","Components/Pages/ViewsQuestion/QuestionPage.js","Components/Pages/Policies/Upload.js","Components/Pages/Policies/PolicyModal.js","Components/Pages/Policies/PoliciesPage.js","Components/Utilities/404/404.jsx","Components/Pages/Admin/Incoming.js","Components/Pages/Admin/Approved.js","Components/Utilities/403/403.js","Components/Pages/Admin/AdminPage.js","Components/Pages/Alerts/Alerts.js","Components/Pages/Info/Response.js","Components/Pages/Info/AcceptTask.js","Components/Pages/Info/Info.js","Components/Layout/Content/Content.jsx","Components/Utilities/ToastComponent/ToastComponent.js","Components/App/App.js","index.js"],"names":["userReducer","state","action","type","payload","loginMode","combineReducers","loginMessage","registrationMessage","tasks","taskDetail","currentTaskId","currentTask","taskAuthor","taskTags","questions","questionDetail","currentQuestionId","currentQuestion","questionAuthor","questionsResponse","questionTags","policies","usersReducer","notifications","toast","rootReducer","user","errors","users","notis","loginUser","logoutUser","loginSaga","put","config","headers","withCredentials","axios","post","console","log","response","status","takeLatest","registerUser","registrationSaga","message","fetchUser","fetchAllUsers","deleteUser","approveUser","promoteUser","sendEmail","userSaga","Axios","get","data","delete","alert","fetchTasks","addTask","fetchCurrentTask","completeTask","acceptTask","updateTask","tasksSaga","title","content","myId","rows","id","item","user_ids","task_id","takeEvery","fetchQuestions","fetchQuestionResponses","addQuestion","addQuestionResponse","deleteQuestion","deleteQuestionResponse","fetchCurrentQuestion","markAsAnswer","verifyQuestionResponse","markAsFrequent","questionsSaga","question_id","fetchPolicies","uploadPolicy","deletePolicy","policySaga","fetchTaskTags","addTaskTags","deleteTaskTags","taskTagsSaga","addToast","deleteToast","fetchNotifications","addNotifications","deleteNotifications","rootSaga","all","toastSaga","notisSaga","customTheme","theme","colors","transparent","tmarBlack","50","100","200","300","400","500","600","700","800","900","tmarTan","tmarNeoGreen","fonts","tmarBody","tmarHeading","tmarMono","MenuItems","children","Text","mt","base","md","mr","display","Navbar","error","show","handleToggle","setState","this","props","dispatch","Flex","as","align","justify","wrap","padding","bg","color","ml","to","Heading","size","letterSpacing","Button","lg","onClick","fill","width","viewBox","xmlns","d","Box","justifyContent","xs","sm","alignItems","flexGrow","direction","w","m","is_admin","React","Component","connect","Login","email","password","handleShowClick","login","event","preventDefault","history","push","handleInputChangeFor","propertyName","target","value","Alert","maxW","minW","my","rounded","p","textAlign","mb","backgroundColor","borderWidth","shadow","onSubmit","FormControl","Stack","spacing","fontSize","FormLabel","htmlFor","Input","isRequired","variant","placeholder","name","onChange","InputGroup","pr","variantColor","h","loadingText","className","href","process","SignUp","first_name","last_name","Unapproved","flexDirection","py","ComponentToShow","ComponentToProtect","component","otherProps","is_approved","Signin","Signup","Home","height","alignContent","Icon","textTransform","SimpleGrid","columns","withRouter","TaskBadge","flex","Badge","x","rightIcon","a","Swal","fire","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","task","tags","user_id","moment","date_posted","format","tagged_users","map","i","key","Tag","borderTop","pt","ButtonGroup","EditTask","DeleteTask","preview","OpenTask","Accordion","allowToggle","defaultIndex","filter","defaultIsOpen","isExpanded","_expanded","_hover","pb","MyTask","assigned_to","SearchTask","searchString","includes","NewTask","select","maxTitle","maxContent","handleChange","maxChars","length","handleInputChange","_focus","border","autoComplete","aria-required","style","Textarea","resize","px","IconButton","y","defaultValue","options","label","EditTaskView","JSON","stringify","TaskPage","activeClassName","from","exact","path","TaskEditView","AnswerQuestion","answer","question","verticalAlign","verified","questionVerified","posted_by","questionId","QuestionBadge","is_verified","is_answered","RecentQuestions","setQuestion","wordBreak","is_frequent","DeleteQuestion","j","Response","userId","UnansweredQuestions","NewQuestion","maxCharsTitle","maxCharsDesc","QuestionPage","searchText","FrequentlyAsked","SearchQuestions","Math","random","client","filestack","useToast","uploadFiles","filename","handle","fromSources","onFileUploadFinished","res","description","duration","isClosable","position","onUploadDone","onFileUploadFailed","minFiles","maxFiles","maxSize","picker","open","useDisclosure","isOpen","onOpen","onClose","Modal","AspectRatioBox","mx","src","PoliciesPage","rel","download","fourOhFour","leftIcon","useState","isOpenAlert","setIsOpen","onCloseAlert","cancelRef","useRef","AlertDialog","leastDestructiveRef","fontWeight","ref","ForeOhThree","AdminPage","sortBy","Tabs","isFitted","Grid","templateColumns","gap","isApproved","isAdmin","Alerts","right","setVerified","index","AcceptTask","accepted","completed","InfoPage","answers","Content","Info","render","App","ThemeProvider","CSSReset","sagaMiddleware","createSagaMiddleware","middlewareList","store","createStore","composeWithDevTools","applyMiddleware","run","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.7cec4be4.chunk.js","sourcesContent":["const userReducer = (state = {}, action) => {\n  switch (action.type) {\n    case \"SET_USER\":\n      return action.payload;\n    case \"UNSET_USER\":\n      return {};\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;\n","const loginMode = (state = \"login\", action) => {\n  switch (action.type) {\n    case \"SET_TO_LOGIN_MODE\":\n      return \"login\";\n    case \"SET_TO_REGISTER_MODE\":\n      return \"register\";\n    default:\n      return state;\n  }\n};\n\n// loginMode will be on the redux state at:\n// state.loginMode\nexport default loginMode;\n","import { combineReducers } from \"redux\";\n\n// loginMessage holds the string that will display\n// on the login screen if there's an error\nconst loginMessage = (state = \"\", action) => {\n  switch (action.type) {\n    case \"CLEAR_LOGIN_ERROR\":\n      return \"\";\n    case \"LOGIN_INPUT_ERROR\":\n      return \"Enter your email and password!\";\n    case \"LOGIN_FAILED\":\n      return \"Oops! The email and password didn't match. Try again!\";\n    case \"LOGIN_FAILED_NO_CODE\":\n      return \"Oops! Something went wrong! Is the server running?\";\n    default:\n      return state;\n  }\n};\n\n// registrationMessage holds the string that will display\n// on the registration screen if there's an error\nconst registrationMessage = (state = \"\", action) => {\n  switch (action.type) {\n    case \"CLEAR_REGISTRATION_ERROR\":\n      return \"\";\n    case \"REGISTRATION_INPUT_ERROR\":\n      return \"Choose a email and password!\";\n    case \"REGISTRATION_FAILED\":\n      return \"Oops! That didn't work. The email might already be taken. Try again!\";\n    default:\n      return state;\n  }\n};\n\n// make one object that has keys loginMessage, registrationMessage\n// these will be on the redux state at:\n// state.errors.loginMessage and state.errors.registrationMessage\nexport default combineReducers({\n  loginMessage,\n  registrationMessage,\n});\n","import { combineReducers } from \"redux\";\n\n// Used to store tasks returned from the server\nconst tasks = (state = [], action) => {\n  switch (action.type) {\n    case \"SET_TASKS\":\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\n// Used to store the detail of the task that is selected\nconst taskDetail = (state = [], action) => {\n  switch (action.type) {\n    case \"SET_TASK_DETAIL\":\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\n// reducer to hold our current task tags\nconst taskTags = (state = [], action) => {\n  switch (action.type) {\n    case \"SET_TASK_TAGS\":\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\n// Used to store the current task that is selected\nconst currentTask = (state = [], action) => {\n  switch (action.type) {\n    case \"SET_CURRENT_TASK\":\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nconst currentTaskId = (state = [], action) => {\n  switch (action.type) {\n    case \"SET_CURRENT_TASK_ID\":\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nconst taskAuthor = (state = [], action) => {\n  switch (action.type) {\n    case \"SET_TASK_AUTHOR\":\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\n// make one object that has keys loginMessage, registrationMessage\n// these will be on the redux state at:\n// state.errors.loginMessage and state.errors.registrationMessage\nexport default combineReducers({\n  tasks,\n  taskDetail,\n  currentTaskId,\n  currentTask,\n  taskAuthor,\n  taskTags,\n});\n","import { combineReducers } from \"redux\";\n\n// Used to store questions returned from the server\nconst questions = (state = [], action) => {\n  switch (action.type) {\n    case \"SET_QUESTIONS\":\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nconst questionsResponse = (state = [], action) => {\n  switch (action.type) {\n    case \"SET_QUESTION_RESPONSES\":\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\n// reducer to hold our current question tags\nconst questionTags = (state = [], action) => {\n  switch (action.type) {\n    case \"SET_QUESTION_TAGS\":\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\n// Used to store the detail of the question that is selected\nconst questionDetail = (state = [], action) => {\n  switch (action.type) {\n    case \"SET_QUESTION_DETAIL\":\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\n// Used to store the current question that is selected\nconst currentQuestion = (state = [], action) => {\n  switch (action.type) {\n    case \"SET_CURRENT_QUESTION\":\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nconst currentQuestionId = (state = [], action) => {\n  switch (action.type) {\n    case \"SET_CURRENT_QUESTION_ID\":\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nconst questionAuthor = (state = [], action) => {\n  switch (action.type) {\n    case \"SET_QUESTION_AUTHOR\":\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\n// make one object that has keys loginMessage, registrationMessage\n// these will be on the redux state at:\n// state.errors.loginMessage and state.errors.registrationMessage\nexport default combineReducers({\n  questions,\n  questionDetail,\n  currentQuestionId,\n  currentQuestion,\n  questionAuthor,\n  questionsResponse,\n  questionTags,\n});\n","const policies = (state = [], action) => {\n  switch (action.type) {\n    case 'SET_POLICIES':\n      return [...action.payload];\n    default:\n      return state;\n  }\n}\n\nexport default policies;","const usersReducer = (state = [], action) => {\n  switch (action.type) {\n    case \"SET_ALL_USERS\":\n      return action.payload;\n    case \"UNSET_ALL_USERS\":\n      return [];\n    default:\n      return state;\n  }\n};\n\nexport default usersReducer;\n","const notifications = (state = [], action) => {\n  switch (action.type) {\n    case \"SET_NOTIFICATIONS\":\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default notifications;\n","const toast = (state = {}, action) => {\n  switch (action.type) {\n    case \"SET_TOAST\":\n      return action.payload;\n    case \"SET_TOAST_NULL\":\n      return {};\n    default:\n      return state;\n  }\n};\nexport default toast;\n","import { combineReducers } from \"redux\";\nimport user from \"./userReducer\";\nimport loginMode from \"./loginModeReducer\";\nimport errors from \"./errorsReducer\";\nimport tasks from \"./tasksReducer\";\nimport questions from \"./questionsReducer\";\nimport policies from \"./policyReducer\";\nimport users from \"./usersReducer\";\nimport notis from \"./notificationReducer\";\n\nimport toast from \"./toastReducer\";\n// rootReducer is the primary reducer for our entire project\n// It bundles up all of the other reducers so our project can use them.\n// This is imported in index.js as rootSaga\n\n// Lets make a bigger object for our store, with the objects from our reducers.\n// This is what we get when we use 'state' inside of 'mapStateToProps'\nconst rootReducer = combineReducers({\n  user, // will have an id and email if someone is logged in\n  loginMode,\n  errors,\n  tasks,\n  questions,\n  policies,\n  users,\n  toast,\n  notis,\n});\n\nexport default rootReducer;\n","import { put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\n\n// worker Saga: will be fired on \"LOGIN\" actions\nfunction* loginUser(action) {\n  try {\n    // clear any existing error on the login page\n    yield put({ type: \"CLEAR_LOGIN_ERROR\" });\n\n    const config = {\n      headers: { \"Content-Type\": \"application/json\" },\n      withCredentials: true,\n    };\n\n    // send the action.payload as the body\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    yield axios.post(\"/api/user/login\", action.payload, config);\n\n    // after the user has logged in\n    // get the user information from the server\n    yield put({ type: \"FETCH_USER\" });\n  } catch (error) {\n    console.log(\"Error with user login:\", error);\n    if (error.response.status === 401) {\n      // The 401 is the error status sent from passport\n      // if user isn't in the database or\n      // if the email and password don't match in the database\n      yield put({ type: \"LOGIN_FAILED\" });\n    } else {\n      // Got an error that wasn't a 401\n      // Could be anything, but most common cause is the server is not started\n      yield put({ type: \"LOGIN_FAILED_NO_CODE\" });\n    }\n  }\n}\n\n// worker Saga: will be fired on \"LOGOUT\" actions\nfunction* logoutUser(action) {\n  try {\n    const config = {\n      headers: { \"Content-Type\": \"application/json\" },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // when the server recognizes the user session\n    // it will end the session\n    yield axios.post(\"/api/user/logout\", config);\n\n    // now that the session has ended on the server\n    // remove the client-side user object to let\n    // the client-side code know the user is logged out\n    yield put({ type: \"UNSET_USER\" });\n  } catch (error) {\n    console.log(\"Error with user logout:\", error);\n  }\n}\n\nfunction* loginSaga() {\n  yield takeLatest(\"LOGIN\", loginUser);\n  yield takeLatest(\"LOGOUT\", logoutUser);\n}\n\nexport default loginSaga;\n","import { put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\n// worker Saga: will be fired on \"REGISTER\" actions\nfunction* registerUser(action) {\n  try {\n    // clear any existing error on the registration page\n    yield put({ type: \"CLEAR_REGISTRATION_ERROR\" });\n\n    // passes the username and password from the payload to the server\n    console.log(\"registrationSaga\", action.payload);\n    yield axios.post(\"/api/user/register\", action.payload);\n\n    // automatically log a user in after registration\n    yield put({ type: \"LOGIN\", payload: action.payload });\n\n    // set to 'login' mode so they see the login screen\n    // after registration or after they log out\n    yield put({ type: \"SET_TO_LOGIN_MODE\" });\n    yield put({\n      type: \"ADD_TOAST\",\n      payload: { status: \"success\", message: \"succeessfully registered user\" },\n    });\n  } catch (error) {\n    yield put({\n      type: \"ADD_TOAST\",\n      payload: { status: \"error\", message: \"failed to register user\" },\n    });\n    yield put({ type: \"REGISTRATION_FAILED\" });\n  }\n}\n\nfunction* registrationSaga() {\n  yield takeLatest(\"REGISTER\", registerUser);\n}\n\nexport default registrationSaga;\n","import Axios from \"axios\";\nimport { put, takeLatest } from \"redux-saga/effects\";\n\n// worker Saga: will be fired on \"FETCH_USER\" actions\nfunction* fetchUser() {\n  try {\n    const config = {\n      headers: { \"Content-Type\": \"application/json\" },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // If a user is logged in, this will return their information\n    // from the server session (req.user)\n    const response = yield Axios.get(\"/api/user\", config);\n\n    // now that the session has given us a user object\n    // with an id and email set the client-side user object to let\n    // the client-side code know the user is logged in\n    yield put({ type: \"SET_USER\", payload: response.data });\n  } catch (error) {\n    console.log(\"User get request failed\", error);\n  }\n}\n\nfunction* fetchAllUsers() {\n  try {\n    const response = yield Axios.get(\"/api/user/all\");\n\n    yield put({ type: \"SET_ALL_USERS\", payload: response.data });\n  } catch (error) {\n    console.log(\"get all users request failed\", error);\n  }\n}\n\n// function to delete user\nfunction* deleteUser(action) {\n  try {\n    yield Axios.delete(`/api/user/${action.payload}`);\n    yield put({ type: \"FETCH_ALL_USERS\" });\n  } catch (error) {\n    alert(\"unable to delete user from server\");\n  }\n}\n\nfunction* approveUser(action) {\n  //Update the question response as verified\n  try {\n    yield Axios.put(`/api/user/approve/${action.payload}`);\n    yield put({ type: \"FETCH_ALL_USERS\" });\n  } catch (error) {\n    alert(\"Unable to approve user on server\", error);\n  }\n}\n\nfunction* promoteUser(action) {\n  //Update the question response as verified\n  try {\n    yield Axios.put(`/api/user/promote/${action.payload}`);\n    yield put({ type: \"FETCH_ALL_USERS\" });\n  } catch (error) {\n    alert(\"Unable to promote user on server\", error);\n  }\n}\n\nfunction* sendEmail(action) {\n  try {\n    yield Axios.post('/api/user/reset', action.payload);\n  } catch (error) {\n    yield console.log(error);\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest(\"FETCH_USER\", fetchUser);\n  yield takeLatest(\"FETCH_ALL_USERS\", fetchAllUsers);\n  yield takeLatest(\"DELETE_USER\", deleteUser);\n  yield takeLatest(\"APPROVE_USER\", approveUser);\n  yield takeLatest(\"PROMOTE_USER\", promoteUser);\n  \n  yield takeLatest(\"SEND_EMAIL\", sendEmail);\n}\n\nexport default userSaga;\n","import Axios from \"axios\";\nimport { put, takeEvery } from \"redux-saga/effects\";\n// function to get Tasks\nfunction* fetchTasks(action) {\n  // wrap it all in try/catch\n  // yield axios\n  // dispatch the result with put!\n  console.log(\"In fetch tasks\");\n  try {\n    const response = yield Axios.get(\"/api/task\");\n    yield put({ type: \"SET_TASKS\", payload: response.data });\n    // yield put({ type: \"ADD_TASK_TAGS\", payload: action.payload });\n  } catch (error) {\n    yield put({\n      type: \"ADD_TOAST\",\n      payload: { status: \"error\", message: \"failed to fetch tasks\" },\n    });\n  }\n}\n\n// function to add Tasks\nfunction* addTask(action) {\n  try {\n    console.log(\"add task\", action.payload);\n    const response = yield Axios.post(\"/api/task\", {\n      title: action.payload.title,\n      content: action.payload.content,\n    });\n    let myId = response.data.rows[0].id;\n    let item = action.payload.user_ids;\n    yield put({\n      type: \"ADD_TASK_TAGS\",\n      payload: { user_ids: item, task_id: myId },\n    });\n    yield put({ type: \"FETCH_TASKS\" });\n    yield put({\n      type: \"ADD_TOAST\",\n      payload: { status: \"success\", message: \"succeessfully added task\" },\n    });\n  } catch (error) {\n    yield put({\n      type: \"ADD_TOAST\",\n      payload: {\n        status: \"error\",\n        message: \"failed to add your task\",\n      },\n    });\n  }\n}\n// function to get current Task\nfunction* fetchCurrentTask(action) {\n  // wrap it all in try/catch\n  // yield axios\n  // dispatch the result with put!\n  try {\n    const response = yield Axios.get(`/api/tasks/${action.payload}`);\n    // const result = yield call(axios.get, '/task');\n    yield put({ type: \"SET_CURRENT_TASK\", payload: response.data });\n  } catch (error) {\n    // console.log('Error fetching tasks', error);\n    yield put({\n      type: \"ADD_TOAST\",\n      payload: { status: \"error\", message: \"failed to fetch current task\" },\n    });\n  }\n}\n\nfunction* completeTask(action) {\n  //Update the task\n  try {\n    yield Axios.put(`/api/task/complete/${action.payload.task_id}`);\n    yield put({ type: \"FETCH_TASKS\" });\n    yield put({\n      type: \"ADD_TOAST\",\n      payload: { status: \"success\", message: \"task completed\" },\n    });\n  } catch (error) {\n    yield put({\n      type: \"ADD_TOAST\",\n      payload: { status: \"error\", message: \"failed to complete task\" },\n    });\n  }\n}\nfunction* acceptTask(action) {\n  //Update the task\n  try {\n    yield Axios.put(`/api/task/accept/${action.payload.task_id}`);\n    yield put({ type: \"FETCH_TASKS\" });\n    yield put({\n      type: \"ADD_TOAST\",\n      payload: { status: \"success\", message: \"task accepted\" },\n    });\n  } catch (error) {\n    yield put({\n      type: \"ADD_TOAST\",\n      payload: { status: \"error\", message: \"failed to accept task\" },\n    });\n  }\n}\nfunction* updateTask(action) {\n  //Update the task\n  try {\n    yield Axios.put(`/api/task/update/${action.payload.id}`, action.payload);\n  } catch (error) {\n    console.log(\"Unable to edit task on server\", error);\n  }\n}\n\nfunction* tasksSaga() {\n  yield takeEvery(\"FETCH_TASKS\", fetchTasks);\n  yield takeEvery(\"ACCEPT_TASK\", acceptTask);\n  yield takeEvery(\"FETCH_CURRENT_TASK\", fetchCurrentTask);\n  yield takeEvery(\"ADD_TASK\", addTask);\n  yield takeEvery(\"COMPLETE_TASK\", completeTask);\n  yield takeEvery(\"UPDATE_TASK\", updateTask);\n}\n\nexport default tasksSaga;\n","import Axios from \"axios\";\nimport { put, takeEvery } from \"redux-saga/effects\";\n// function to get Questions\nfunction* fetchQuestions(action) {\n  // wrap it all in try/catch\n  // yield axios\n  // dispatch the result with put!\n  try {\n    const response = yield Axios.get(\"/api/question\");\n    // const result = yield call(axios.get, '/question');\n    yield put({ type: \"SET_QUESTIONS\", payload: response.data });\n  } catch (error) {\n    yield put({\n      type: \"ADD_TOAST\",\n      payload: {\n        status: \"error\",\n        message: \"error getting questions\",\n      },\n    });\n  }\n}\n\nfunction* fetchQuestionResponses(action) {\n  // wrap it all in try/catch\n  // yield axios\n  // dispatch the result with put!\n  try {\n    yield put({ type: \"SET_QUESTION_RESPONSES\", payload: [] });\n    const response = yield Axios.get(\n      `/api/question/responses/${action.payload.question_id}`\n    );\n    console.log(`done with 'get'`, response);\n    // const result = yield call(axios.get, '/question');\n    yield put({ type: \"SET_QUESTION_RESPONSES\", payload: response.data });\n  } catch (error) {\n    yield put({\n      type: \"ADD_TOAST\",\n      payload: {\n        status: \"error\",\n        message: \"error getting responses\",\n      },\n    });\n  }\n}\n\n// function to add Questions\nfunction* addQuestion(action) {\n  // wrap it all in try/catch\n  // yield axios\n  // dispatch the result with put!\n  try {\n    yield Axios.post(\"/api/question\", action.payload);\n    yield put({ type: \"FETCH_QUESTIONS\" });\n    yield put({\n      type: \"ADD_TOAST\",\n      payload: { status: \"success\", message: \"question added\" },\n    });\n  } catch (error) {\n    yield put({\n      type: \"ADD_TOAST\",\n      payload: {\n        status: \"error\",\n        message: \"error adding your Question\",\n      },\n    });\n  }\n}\n\n// function to add a Question Response\nfunction* addQuestionResponse(action) {\n  // wrap it all in try/catch\n  // yield axios\n  // dispatch the result with put!\n  try {\n    yield Axios.post(\"/api/question_response\", action.payload);\n    yield Axios.put(`/api/question/answer/${action.payload.question_id}`);\n    yield put({ type: \"FETCH_QUESTION_RESPONSES\", payload: action.payload });\n    yield put({\n      type: \"ADD_TOAST\",\n      payload: { status: \"success\", message: \"response added\" },\n    });\n    yield put({ type: \"FETCH_QUESTIONS\" });\n  } catch (error) {\n    yield put({\n      type: \"ADD_TOAST\",\n      payload: {\n        status: \"error\",\n        message: \"unable to add new Question Response to server\",\n      },\n    });\n  }\n}\n\n// function to delete Questions\nfunction* deleteQuestion(action) {\n  // wrap it all in try/catch\n  // dispatch the result with put!\n  try {\n    yield Axios.delete(`/api/question/${action.payload.question_id}`);\n    yield put({ type: \"FETCH_QUESTIONS\" });\n    yield put({\n      type: \"ADD_TOAST\",\n      payload: { status: \"success\", message: \"question deleted\" },\n    });\n  } catch (error) {\n    yield put({\n      type: \"ADD_TOAST\",\n      payload: {\n        status: \"error\",\n        message: \"unable to delete Question from server\",\n      },\n    });\n  }\n}\n\n// function to delete a Questions response\nfunction* deleteQuestionResponse(action) {\n  // wrap it all in try/catch\n  // yield axios\n  // dispatch the result with put!\n  try {\n    yield Axios.delete(`/api/question_response/${action.payload}`);\n    yield put({\n      type: \"ADD_TOAST\",\n      payload: { status: \"success\", message: \"response deleted\" },\n    });\n  } catch (error) {\n    yield put({\n      type: \"ADD_TOAST\",\n      payload: {\n        status: \"error\",\n        message: \"unable to delete Question Response from server\",\n      },\n    });\n  }\n}\n\n// function to get current Question\nfunction* fetchCurrentQuestion(action) {\n  // wrap it all in try/catch\n  // yield axios\n  // dispatch the result with put!\n  try {\n    const response = yield Axios.get(`/api/questions/${action.payload}`);\n    // const result = yield call(axios.get, '/question');\n    yield put({ type: \"SET_CURRENT_QUESTION\", payload: response.data });\n  } catch (error) {\n    yield put({\n      type: \"ADD_TOAST\",\n      payload: {\n        status: \"error\",\n        message: \"Unable to fetch current Question\",\n      },\n    });\n  }\n}\n\nfunction* markAsAnswer(action) {\n  //update the question as answered\n  try {\n    yield Axios.put(`/api/question_response/verify/${action.payload.id}`);\n    yield Axios.put(`/api/question/verify/${action.payload.question_id}`);\n    yield put({ type: \"FETCH_QUESTIONS\" });\n    yield put({\n      type: \"FETCH_QUESTION_RESPONSES\",\n      payload: { question_id: action.payload.question_id },\n    });\n    yield put({\n      type: \"ADD_TOAST\",\n      payload: { status: \"success\", message: \"Set as verified answer\" },\n    });\n  } catch (error) {\n    yield put({\n      type: \"ADD_TOAST\",\n      payload: {\n        status: \"error\",\n        message: \"Unable to mark as answered\",\n      },\n    });\n  }\n}\n\nfunction* verifyQuestionResponse(action) {\n  //Update the question response as verified\n  try {\n    yield Axios.put(`/api/question_response/verify/${action.payload.id}`);\n  } catch (error) {\n    yield put({\n      type: \"ADD_TOAST\",\n      payload: {\n        status: \"error\",\n        message: \"Unable to verify response\",\n      },\n    });\n  }\n}\n\nfunction* markAsFrequent(action) {\n  //update the question as frequent\n  try {\n    yield Axios.put(`/api/question/frequent/${action.payload.question_id}`);\n    yield put({ type: \"FETCH_QUESTIONS\" });\n    yield put({\n      type: \"ADD_TOAST\",\n      payload: { status: \"success\", message: \"Set as frequent question\" },\n    });\n  } catch (error) {\n    yield put({\n      type: \"ADD_TOAST\",\n      payload: {\n        status: \"error\",\n        message: \"Unable to mark as frequent question\",\n      },\n    });\n  }\n}\n\nfunction* questionsSaga() {\n  yield takeEvery(\"FETCH_QUESTIONS\", fetchQuestions);\n  yield takeEvery(\"FETCH_CURRENT_QUESTION\", fetchCurrentQuestion);\n  yield takeEvery(\"ADD_QUESTION\", addQuestion);\n  yield takeEvery(\"DELETE_QUESTION\", deleteQuestion);\n  yield takeEvery(\"MARK_AS_ANSWER\", markAsAnswer); // only admin can\n  yield takeEvery(\"MARK_AS_FREQUENT\", markAsFrequent);\n  // QUESTION RESPONSES BELOW\n  yield takeEvery(\"FETCH_QUESTION_RESPONSES\", fetchQuestionResponses);\n  yield takeEvery(\"ADD_QUESTION_RESPONSE\", addQuestionResponse);\n  yield takeEvery(\"DELETE_QUESTION_RESPONSE\", deleteQuestionResponse);\n  yield takeEvery(\"VERIFY_QUESTION_RESPONSE\", verifyQuestionResponse);\n}\n\nexport default questionsSaga;\n","import Axios from 'axios';\nimport { put, takeEvery } from 'redux-saga/effects';\n\nfunction* fetchPolicies() {\n  const response = yield Axios.get('/api/policy');\n  yield put({ type: 'SET_POLICIES', payload: response.data });\n}\n\nfunction* uploadPolicy(action) {\n  yield Axios.post('/api/policy/new', action.payload);\n  yield put({ type: 'FETCH_POLICIES' });\n}\n\nfunction* deletePolicy(action) {\n  yield Axios.delete(`/api/policy/delete/${action.payload}`);\n  yield put({ type: 'FETCH_POLICIES' });\n}\n\nfunction* policySaga() {\n  yield takeEvery('FETCH_POLICIES', fetchPolicies);\n  yield takeEvery('UPLOAD_POLICY', uploadPolicy);\n  yield takeEvery('DELETE_POLICY', deletePolicy);\n}\n\nexport default policySaga;","import Axios from \"axios\";\nimport { put, takeEvery } from \"redux-saga/effects\";\n\n// this is our function to get all the tags for a single task\nfunction* fetchTaskTags(action) {\n  try {\n    yield put({ type: \"SET_TASK_TAGS\", payload: [] });\n    const response = yield Axios.get(`/api/task_tag/${action.payload.task_id}`);\n    console.log(`done with 'get'`, response);\n    // const result = yield call(axios.get, '/tags');\n    yield put({ type: \"SET_TASK_TAGS\", payload: response.data });\n  } catch (error) {\n    alert(\"Error fetching Task Tags\", error);\n  }\n}\n\n// function to add a Task tags\nfunction* addTaskTags(action) {\n  try {\n    console.log(\"action\", action);\n    console.log(\"action.payload\", action.payload);\n    yield Axios.post(\"/api/task_tag\", action.payload);\n    yield put({ type: \"FETCH_TASK_TAGS\", payload: action.payload });\n  } catch (error) {\n    // console.log('Error fetching Task Tags', error);\n    alert(\"unable to add new Task Tags to server\");\n  }\n}\n\nfunction* deleteTaskTags(action) {\n  // wrap it all in try/catch\n  // yield axios\n  // dispatch the result with put!\n  try {\n    yield Axios.delete(`/api/task_tag/${action.payload}`);\n    // yield put({ type: \"FETCH_TASK_TAGS\", payload: action.payload }); // How are we also going have\n  } catch (error) {\n    // task id in this saga?\n    // console.log('Error deleting Task tag', error);\n    alert(\"unable to delete Task Tag from server\");\n  }\n}\n\nfunction* taskTagsSaga() {\n  yield takeEvery(\"FETCH_TASK_TAGS\", fetchTaskTags);\n  yield takeEvery(\"ADD_TASK_TAGS\", addTaskTags);\n  yield takeEvery(\"DELETE_TASK_TAGS\", deleteTaskTags);\n}\n\nexport default taskTagsSaga;\n","import { put, takeEvery } from \"redux-saga/effects\";\n// function to get Tasks\nfunction* addToast(action) {\n  try {\n    yield put({ type: \"SET_TOAST\", payload: action.payload });\n    // yield put({ type: \"ADD_TASK_TAGS\", payload: action.payload });\n  } catch (error) {\n    alert(\"ERROR: Unable to send alert.\");\n  }\n}\n\n// function to get current Task\nfunction* deleteToast(action) {\n  // wrap it all in try/catch\n  // yield axios\n  // dispatch the result with put!\n  try {\n    yield put({ type: \"SET_TOAST_NULL\" });\n  } catch (error) {\n    // console.log('Error fetching tasks', error);\n    alert(\n      \"ERROR: Unable to set alert status to false. please refresh the page or contact an administrator.\"\n    );\n  }\n}\nfunction* tasksSaga() {\n  yield takeEvery(\"ADD_TOAST\", addToast);\n  yield takeEvery(\"DELETE_TOAST\", deleteToast);\n}\nexport default tasksSaga;\n","import Axios from \"axios\";\nimport { put, takeEvery } from \"redux-saga/effects\";\n\n// this is our function to get all notifications\nfunction* fetchNotifications(action) {\n  try {\n    yield put({ type: \"SET_NOTIFICATIONS\", payload: [] });\n    const response = yield Axios.get(`/api/notification`);\n    yield put({ type: \"SET_NOTIFICATIONS\", payload: response.data });\n  } catch (error) {\n    alert(\"Error fetching notifications\", error);\n  }\n}\n\n// function to add a notification\nfunction* addNotifications(action) {\n  try {\n    yield Axios.post(\"/api/notification\", action.payload);\n    yield put({ type: \"FETCH_NOTIFICATIONS\", payload: action.payload });\n  } catch (error) {\n    alert(\"unable to add new notification to server\");\n  }\n}\n\n// function to delete a notification\nfunction* deleteNotifications(action) {\n  try {\n    yield Axios.delete(`/api/notification/${action.payload}`);\n    yield put({ type: 'FETCH_NOTIFICATIONS' });\n  } catch (error) {\n    alert(\"unable to delete Task Tag from server\");\n  }\n}\n\nfunction* taskTagsSaga() {\n  yield takeEvery(\"FETCH_NOTIFICATIONS\", fetchNotifications);\n  yield takeEvery(\"ADD_NOTIFICATIONS\", addNotifications);\n  yield takeEvery(\"DELETE_NOTIFICATIONS\", deleteNotifications);\n}\n\nexport default taskTagsSaga;\n","import { all } from \"redux-saga/effects\";\nimport loginSaga from \"./loginSaga\";\nimport registrationSaga from \"./registrationSaga\";\nimport userSaga from \"./userSaga\";\nimport tasksSaga from \"./tasksSaga\";\nimport questionsSaga from \"./questionsSaga\";\nimport policySaga from \"./policySaga\";\nimport taskTagsSaga from \"./taskTagsSaga\";\nimport toastSaga from \"./toastSaga\";\nimport notisSaga from \"./notificationSaga\";\n\n// rootSaga is the primary saga.\n// It bundles up all of the other sagas so our project can use them.\n// This is imported in index.js as rootSaga\n\n// some sagas trigger other sagas, as an example\n// the registration triggers a login\n// and login triggers setting the user\nexport default function* rootSaga() {\n  yield all([\n    userSaga(),\n    loginSaga(),\n    registrationSaga(),\n    tasksSaga(),\n    taskTagsSaga(),\n    questionsSaga(),\n    policySaga(),\n    toastSaga(),\n    notisSaga(),\n  ]);\n}\n","// https://chakra-ui.com/theme\n// https://system-ui.com/theme/\n// https://github.com/chakra-ui/chakra-ui/tree/master/\n// https://smart-swatch.netlify.app/\n// https://styled-system.com/table/\n\n// ----- Start of default theme colors -----\n/*\n----- Black & White -----\n\nBlack\n#000\n\nWhite\n#FFF\n\n----- Gray -----\n\nGray 50\n#F7FAFC\n\nGray 100\n#EDF2F7\n\nGray 200\n#E2E8F0\n\nGray 300\n#CBD5E0\n\nGray 400\n#A0AEC0\n\nGray 500\n#718096\n\nGray 600\n#4A5568\n\nGray 700\n#2D3748\n\nGray 800\n#1A202C\n\nGray 900\n#171923\n\n----- Red -----\n\nRed 50\n#FFF5F5\n\nRed 100\n#FED7D7\n\nRed 200\n#FEB2B2\n\nRed 300\n#FC8181\n\nRed 400\n#F56565\n\nRed 500\n#E53E3E\n\nRed 600\n#C53030\n\nRed 700\n#9B2C2C\n\nRed 800\n#822727\n\nRed 900\n#63171B\n\n----- Orange -----\n\nOrange 50\n#FFFAF0\n\nOrange 100\n#FEEBC8\n\nOrange 200\n#FBD38D\n\nOrange 300\n#F6AD55\n\nOrange 400\n#ED8936\n\nOrange 500\n#DD6B20\n\nOrange 600\n#C05621\n\nOrange 700\n#9C4221\n\nOrange 800\n#7B341E\n\nOrange 900\n#652B19\n\n----- Yellow -----\n\nYellow 50\n#FFFFF0\n\nYellow 100\n#FEFCBF\n\nYellow 200\n#FAF089\n\nYellow 300\n#F6E05E\n\nYellow 400\n#ECC94B\n\nYellow 500\n#D69E2E\n\nYellow 600\n#B7791F\n\nYellow 700\n#975A16\n\nYellow 800\n#744210\n\nYellow 900\n#5F370E\n\n----- Green -----\n\nGreen 50\n#F0FFF4\n\nGreen 100\n#C6F6D5\n\nGreen 200\n#9AE6B4\n\nGreen 300\n#68D391\n\nGreen 400\n#48BB78\n\nGreen 500\n#38A169\n\nGreen 600\n#2F855A\n\nGreen 700\n#276749\n\nGreen 800\n#22543D\n\nGreen 900\n#1C4532\n\n----- Teal -----\n\nTeal 50\n#E6FFFA\n\nTeal 100\n#B2F5EA\n\nTeal 200\n#81E6D9\n\nTeal 300\n#4FD1C5\n\nTeal 400\n#38B2AC\n\nTeal 500\n#319795\n\nTeal 600\n#2C7A7B\n\nTeal 700\n#285E61\n\nTeal 800\n#234E52\n\nTeal 900\n#1D4044\n\n----- Blue -----\n\nBlue 50\n#EBF8FF\n\nBlue 100\n#CEEDFF\n\nBlue 200\n#90CDF4\n\nBlue 300\n#63B3ED\n\nBlue 400\n#4299E1\n\nBlue 500\n#3182CE\n\nBlue 600\n#2A69AC\n\nBlue 700\n#1E4E8C\n\nBlue 800\n#153E75\n\nBlue 900\n#1A365D\n\n----- Cyan -----\n\nCyan 50\n#EDFDFD\n\nCyan 100\n#C4F1F9\n\nCyan 200\n#9DECF9\n\nCyan 300\n#76E4F7\n\nCyan 400\n#0BC5EA\n\nCyan 500\n#00B5D8\n\nCyan 600\n#00A3C4\n\nCyan 700\n#0987A0\n\nCyan 800\n#086F83\n\nCyan 900\n#065666\n\n----- Purple -----\n\nPurple 50\n#FAF5FF\n\nPurple 100\n#E9D8FD\n\nPurple 200\n#D6BCFA\n\nPurple 300\n#B794F4\n\nPurple 400\n#9F7AEA\n\nPurple 500\n#805AD5\n\nPurple 600\n#6B46C1\n\nPurple 700\n#553C9A\n\nPurple 800\n#44337A\n\nPurple 900\n#322659\n\n----- Pink -----\n\nPink 50\n#FFF5F7\n\nPink 100\n#FED7E2\n\nPink 200\n#FBB6CE\n\nPink 300\n#F687B3\n\nPink 400\n#ED64A6\n\nPink 500\n#D53F8C\n\nPink 600\n#B83280\n\nPink 700\n#97266D\n\nPink 800\n#702459\n\nPink 900\n#521B41\n\n*/\n// ----- End of default theme colors -----\n\n// Chakra-ui Default Theme Import:\nimport { theme } from \"@chakra-ui/core\";\n// Font CSS Import:\nimport \"../Components/App/App.css\"\n\n// ----- This is the custom theme for Turtle Mountain Connect -----\nconst customTheme = {\n  // Spreading the theme object to add new key values for custom css\n  ...theme,\n  // Add a theme.colors object to provide colors for your project. By default these colors can be referenced by the color, borderColor, and backgroundColor, fill, stroke, styles.\n  // We recommend adding palette that go from 50 - 900.\n  colors: {\n    ...theme.colors,\n    transparent: \"transparent\",\n    tmarBlack: {\n      50: \"#f8f0f2\",\n      100: \"#d9d8d8\",\n      200: \"#bfbfbf\",\n      300: \"#a5a5a5\",\n      400: \"#8b8b8b\",\n      500: \"#727272\",\n      600: \"#585858\",\n      700: \"#3f3f3f\",\n      800: \"#272626\", // This is our nav bar color\n      900: \"#130b0d\",\n    },\n    tmarTan: {\n      50: \"#fef2e1\",\n      100: \"#eedcc2\",\n      200: \"#dfc59e\",\n      300: \"#d1ae7a\",\n      400: \"#c39756\", // This is our nav selected button color\n      500: \"#a97d3c\",\n      600: \"#84622e\",\n      700: \"#5f461f\",\n      800: \"#392a0f\",\n      900: \"#190d00\",\n    },\n    tmarNeoGreen: {\n      50: \"#e5fff2\", // This is our page background color\n      100: \"#b9fedb\",\n      200: \"#8bfdc2\",\n      300: \"#60fdaa\",\n      400: \"#41fd92\",\n      500: \"#34e479\",\n      600: \"#28b25e\",\n      700: \"#1b7f44\",\n      800: \"#0c4c28\",\n      900: \"#001a0d\",\n    },\n  },\n  /*\n    ----- Typography -----\n    To manage Typography options, the theme object supports the following keys:\n      fonts (font families)\n      fontSizes\n      fontWeights\n      lineHeights\n      letterSpacings\n    */\n  fonts: {\n    ...theme.fonts,\n    tmarBody: \"Montserrat', sans-serif\",\n    tmarHeading: \"Merriweather', serif\",\n    tmarMono: \"Menlo, monospace\",\n  },\n  /*\n    ----- Breakpoints -----\n    To configure the default breakpoints used in responsive array values, add a breakpoints array to your theme.\n    These values will be used to generate mobile-first (i.e. min-width) media queries, which can then be used to apply responsive styles.\n    */\n  /*\n     ----- Spacing -----\n    The space key allows you to customize the global spacing and sizing scale for your project.\n    By default these spacing value can be referenced by the padding, margin, and top, left, right, bottom styles.\n    */\n  /*\n    ----- Sizes -----\n    The sizes key allows you to customize the global sizing of components you build for your project.\n    By default these spacing value can be referenced by the width, height, and maxWidth, minWidth, maxHeight, minHeight styles.\n    ----- Z-Index ----- \n    Chakra provides some zIndex values out of the box to control the stacking order of components.\n    ---------------\n    ----- Icons -----\n    All Chakra icons are stored in the theme object under the icons key.\n    */\n};\n\nexport default customTheme;","// ----- Start of imports -----\n// React Import:\nimport React from \"react\";\n// Redux Imports:\nimport { connect } from \"react-redux\";\n// React Router DOM Imports:\nimport { NavLink } from \"react-router-dom\";\n// Chakra UI Imports:\nimport { Box, Heading, Flex, Text, Button } from \"@chakra-ui/core\";\n// CSS Import:\nimport \"../../App/App.css\";\n// ----- End of imports -----\n\nconst MenuItems = ({ children }) => (\n  <Text mt={{ base: 4, md: 0 }} mr={1} display=\"block\">\n    {children}\n  </Text>\n);\n\nexport class Navbar extends React.Component {\n  state = {\n    error: null,\n    show: false,\n  };\n\n  UNSAFE_componentWillMount() {\n    this.props.dispatch({ type: \"FETCH_USER\" });\n  }\n\n  handleToggle = () => {\n    if (this.state.show === false) {\n      this.setState({ show: true });\n    } else {\n      this.setState({ show: false });\n    }\n  };\n\n  render() {\n    return (\n      <Flex\n        as=\"nav\"\n        align=\"center\"\n        justify=\"space-between\"\n        wrap=\"wrap\"\n        padding=\"0.25rem\"\n        bg=\"tmarBlack.800\"\n        color=\"#f5fffe\"\n      >\n        {/* Start of logo / title area */}\n        <Flex align=\"center\" ml={3} mr={5}>\n          <NavLink to=\"/home\">\n            <Heading as=\"h1\" size=\"lg\" letterSpacing={\"-.1rem\"}>\n              Turtle Mountain Connect\n            </Heading>\n          </NavLink>\n        </Flex>\n        {/* End of logo / title area */}\n        {/* Start of hamburger menu */}\n        <Button\n          mr={2}\n          display={{ base: \"block\", lg: \"none\" }}\n          onClick={this.handleToggle}\n        >\n          <svg\n            fill=\"white\"\n            width=\"12px\"\n            viewBox=\"0 0 20 20\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <title>Menu</title>\n            <path d=\"M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z\" />\n          </svg>\n        </Button>\n        {/* End of hamburger menu */}\n        {/* Start of button menu navbar area */}\n        <Box\n          justifyContent=\"flex-end\"\n          display={{\n            xs: this.state.show ? \"block\" : \"none\",\n            sm: this.state.show ? \"block\" : \"none\",\n            md: this.state.show ? \"block\" : \"none\",\n            lg: \"flex\",\n          }}\n          width={{ xs: \"full\", sm: \"full\", md: \"full\", lg: \"auto\" }}\n          alignItems=\"center\"\n          flexGrow={1}\n        >\n          <Flex\n            mr={{ xs: 3, sm: 3, md: 3 }}\n            direction={this.state.show ? \"column\" : \"row\"}\n          >\n            {!this.props.user.id ? (\n              <>\n                <MenuItems>\n                  <NavLink to=\"/login\">\n                    <Button\n                      w={{ xs: \"full\", sm: \"full\", md: \"full\", lg: \"auto\" }}\n                      m={2}\n                    >\n                      Login\n                    </Button>\n                  </NavLink>\n                </MenuItems>\n                <MenuItems>\n                  <NavLink to=\"/signup\">\n                    <Button\n                      w={{ xs: \"full\", sm: \"full\", md: \"full\", lg: \"auto\" }}\n                      m={2}\n                    >\n                      Signup\n                    </Button>\n                  </NavLink>\n                </MenuItems>\n              </>\n            ) : (\n              <>\n                <MenuItems>\n                  <NavLink to=\"/home\">\n                    <Button\n                      w={{ xs: \"full\", sm: \"full\", md: \"full\", lg: \"auto\" }}\n                      m={2}\n                    >\n                      Home\n                    </Button>\n                  </NavLink>\n                </MenuItems>\n                <MenuItems>\n                  <NavLink to=\"/tasks\">\n                    <Button\n                      w={{ xs: \"full\", sm: \"full\", md: \"full\", lg: \"auto\" }}\n                      m={2}\n                    >\n                      Tasks\n                    </Button>\n                  </NavLink>\n                </MenuItems>\n                <MenuItems>\n                  <NavLink to=\"/questions\">\n                    <Button\n                      w={{ xs: \"full\", sm: \"full\", md: \"full\", lg: \"auto\" }}\n                      m={2}\n                    >\n                      Questions\n                    </Button>\n                  </NavLink>\n                </MenuItems>\n                <MenuItems>\n                  <NavLink to=\"/policies\">\n                    <Button\n                      w={{ xs: \"full\", sm: \"full\", md: \"full\", lg: \"auto\" }}\n                      m={2}\n                    >\n                      Policies\n                    </Button>\n                  </NavLink>\n                </MenuItems>\n                <MenuItems>\n                  <NavLink to=\"/alerts\">\n                    <Button\n                      w={{ xs: \"full\", sm: \"full\", md: \"full\", lg: \"auto\" }}\n                      m={2}\n                    >\n                      Alerts\n                    </Button>\n                  </NavLink>\n                </MenuItems>\n                <MenuItems>\n                  <NavLink to=\"/info\">\n                    <Button\n                      w={{ xs: \"full\", sm: \"full\", md: \"full\", lg: \"auto\" }}\n                      m={2}\n                    >\n                      Info\n                    </Button>\n                  </NavLink>\n                </MenuItems>\n                {this.props.user.is_admin ? (\n                  <MenuItems>\n                    <NavLink to=\"/admin\">\n                      <Button\n                        w={{ xs: \"full\", sm: \"full\", md: \"full\", lg: \"auto\" }}\n                        m={2}\n                      >\n                        Admin\n                      </Button>\n                    </NavLink>\n                  </MenuItems>\n                ) : (\n                  <></>\n                )}\n                <MenuItems>\n                  <NavLink to=\"/login\">\n                    <Button\n                      w={{ xs: \"full\", sm: \"full\", md: \"full\", lg: \"auto\" }}\n                      m={2}\n                      onClick={() => {\n                        this.props.dispatch({ type: \"LOGOUT\" });\n                      }}\n                    >\n                      Logout\n                    </Button>\n                  </NavLink>\n                </MenuItems>\n              </>\n            )}\n          </Flex>\n        </Box>\n        {/* End of button menu navbar area */}\n      </Flex>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n    // tasks: state.tasks.tasks,\n  };\n};\nexport default connect(mapStateToProps)(Navbar);\n","// ----- Start of imports -----\n// React Import:\nimport React, { Component } from \"react\";\n// React Redux import:\nimport { connect } from \"react-redux\";\n// Chakra UI Imports:\nimport {\n  Box,\n  Button,\n  Heading,\n  Input,\n  InputRightElement,\n  Stack,\n  Text,\n  FormLabel,\n  InputGroup,\n  FormControl,\n  Alert,\n  AlertIcon,\n} from \"@chakra-ui/core\";\n// CSS Import:\nimport \"./Login.css\";\n// ----- End of imports -----\n\nclass Login extends Component {\n  state = {\n    show: false,\n    email: \"\",\n    password: \"\",\n  };\n\n  handleShowClick = () => {\n    if (this.state.show === true) {\n      this.setState({\n        show: false,\n      });\n    } else {\n      this.setState({\n        show: true,\n      });\n    }\n  };\n\n  login = (event) => {\n    event.preventDefault();\n\n    if (this.state.email && this.state.password) {\n      this.props.dispatch({\n        type: \"LOGIN\",\n        payload: {\n          email: this.state.email,\n          password: this.state.password,\n        },\n      });\n      this.props.history.push(\"/home\");\n    } else {\n      this.props.dispatch({ type: \"LOGIN_INPUT_ERROR\" });\n    }\n  }; // end login\n\n  handleInputChangeFor = (propertyName) => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  };\n  render() {\n    return (\n      <div>\n        {/* Start of log in message */}\n        {this.props.errors.loginMessage && (\n          <Alert\n            maxW=\"80%\"\n            minW=\"80%\"\n            ml=\"auto\"\n            mr=\"auto\"\n            my={3}\n            rounded=\"full\"\n            status=\"error\"\n          >\n            <AlertIcon />\n            {this.props.errors.loginMessage}\n            {/* <CloseButton\n              rounded=\"full\"\n              position=\"absolute\"\n              right=\"8px\"\n              top=\"8px\"\n            /> */}\n          </Alert>\n        )}\n        {/* End of log in message */}\n        {/* Start of Log In Area */}\n        <Box w={[400, 500, 600]} p={4} m=\"20px auto\">\n          <Heading as=\"h1\" size=\"xl\" textAlign=\"center\" mb={6}>\n            Please Login\n          </Heading>\n          <Box\n            backgroundColor=\"#2f2e2e\"\n            as=\"form\"\n            p={4}\n            borderWidth=\"1px\"\n            rounded=\"lg\"\n            shadow=\"1px 1px 3px rgba(0,0,0,0.3)\"\n          >\n            {/* Start of Form Area */}\n            <form onSubmit={this.login}>\n              <FormControl>\n                <Stack spacing={3}>\n                  <Text fontSize=\"md\">Login with your email and password</Text>\n                  <FormLabel p={0} htmlFor=\"email\">\n                    Email:\n                    <Input\n                      isRequired\n                      variant=\"outline\"\n                      placeholder=\"Email\"\n                      type=\"email\"\n                      name=\"email\"\n                      value={this.state.email}\n                      onChange={this.handleInputChangeFor(\"email\")}\n                    />\n                  </FormLabel>\n                  <FormLabel p={0} htmlFor=\"password\">\n                    Password:\n                    <InputGroup>\n                      <Input\n                        isRequired\n                        pr=\"4.5rem\"\n                        type={this.state.show ? \"text\" : \"password\"}\n                        placeholder=\"Enter password\"\n                        name=\"password\"\n                        value={this.state.password}\n                        onChange={this.handleInputChangeFor(\"password\")}\n                      />\n                      <InputRightElement width=\"4.5rem\">\n                        <Button\n                          variantColor=\"gray\"\n                          color=\"gray.800\"\n                          h=\"1.75rem\"\n                          size=\"sm\"\n                          onClick={this.handleShowClick}\n                        >\n                          {this.state.show ? \"Hide\" : \"Show\"}\n                        </Button>\n                      </InputRightElement>\n                    </InputGroup>\n                  </FormLabel>\n                </Stack>\n                <Stack spacing={3} mt={4}>\n                  <Button\n                    loadingText=\"Submitting\"\n                    variantColor=\"teal\"\n                    type=\"submit\"\n                  >\n                    Login\n                  </Button>\n                  <Text>or</Text>\n                  <Button\n                    className=\"btn-signup\"\n                    variantColor=\"teal\"\n                    variant=\"outline\"\n                    color=\"#f5fffa\"\n                    onClick={() => this.props.history.push(\"/signup\")}\n                  >\n                    Sign Up\n                  </Button>\n                  <Button\n                    as=\"a\"\n                    href={`${process.env.REACT_APP_SERVER_URL}/api/auth/facebook/`}\n                    variantColor=\"blue\"\n                    variant=\"solid\"\n                  >\n                    Login With Facebook\n                  </Button>\n                </Stack>\n              </FormControl>\n            </form>\n            {/* End of Form Area */}\n          </Box>\n        </Box>\n        {/* End of Log In Area */}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(Login);\n","// ----- Start of imports -----\n// React Import:\nimport React, { Component } from \"react\";\n// React Redux Import:\nimport { connect } from \"react-redux\";\n// Chakra UI Imports:\nimport {\n  Box,\n  Button,\n  Heading,\n  Input,\n  InputGroup,\n  InputRightElement,\n  Stack,\n  FormLabel,\n  Text,\n  FormControl,\n} from \"@chakra-ui/core\";\n// CSS Import:\nimport \"../Login/Login.css\";\n// ----- End of imports -----\n\nclass SignUp extends Component {\n  state = {\n    show: false,\n    email: \"\",\n    password: \"\",\n    first_name: \"\",\n    last_name: \"\",\n  };\n\n  handleShowClick = () => {\n    if (this.state.show === true) {\n      this.setState({\n        show: false,\n      });\n    } else {\n      this.setState({\n        show: true,\n      });\n    }\n  };\n\n  registerUser = (event) => {\n    console.log(\"registerUser Function\");\n    event.preventDefault();\n\n    if (this.state.email && this.state.password) {\n      console.log(this.state);\n      this.props.dispatch({\n        type: \"REGISTER\",\n        payload: {\n          email: this.state.email,\n          password: this.state.password,\n          first_name: this.state.first_name,\n          last_name: this.state.last_name,\n        },\n      });\n    } else {\n      this.props.dispatch({ type: \"REGISTRATION_INPUT_ERROR\" });\n    }\n    this.props.history.push(\"/home\");\n  }; // end registerUser\n\n  handleInputChangeFor = (propertyName) => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        {this.props.errors.registrationMessage && (\n          <Box width={[400, 500, 600]} p={4} m=\"20px auto\">\n            <Heading as=\"h3\" size=\"xl\" textAlign=\"center\" mb={6}>\n              {this.props.errors.registrationMessage}\n            </Heading>\n          </Box>\n        )}\n        <Box width={[400, 500, 600]} p={4} m=\"20px auto\">\n          <Heading as=\"h1\" size=\"xl\" textAlign=\"center\" mb={6}>\n            Please Sign Up\n          </Heading>\n          <Box\n            backgroundColor=\"#2f2e2e\"\n            as=\"form\"\n            p={4}\n            borderWidth=\"1px\"\n            rounded=\"lg\"\n            shadow=\"1px 1px 3px rgba(0,0,0,0.3)\"\n          >\n            <form onSubmit={this.registerUser}>\n              <FormControl>\n                <Stack spacing={3}>\n                  <FormLabel p={0} htmlFor=\"first_name\">\n                    First Name:\n                    <Input\n                      isRequired\n                      variant=\"outline\"\n                      placeholder=\"First Name\"\n                      type=\"text\"\n                      name=\"first_name\"\n                      value={this.state.first_name}\n                      onChange={this.handleInputChangeFor(\"first_name\")}\n                    />\n                  </FormLabel>\n                  <FormLabel p={0} htmlFor=\"last_name\">\n                    Last Name:\n                    <Input\n                      isRequired\n                      variant=\"outline\"\n                      placeholder=\"Last Name\"\n                      type=\"text\"\n                      name=\"last_name\"\n                      value={this.state.last_name}\n                      onChange={this.handleInputChangeFor(\"last_name\")}\n                    />\n                  </FormLabel>\n                  <FormLabel p={0} htmlFor=\"email\">\n                    Email:\n                    <Input\n                      isRequired\n                      variant=\"outline\"\n                      placeholder=\"Email\"\n                      type=\"email\"\n                      name=\"email\"\n                      value={this.state.email}\n                      onChange={this.handleInputChangeFor(\"email\")}\n                    />\n                  </FormLabel>\n                  <FormLabel p={0} htmlFor=\"password\">\n                    Password:\n                    <InputGroup>\n                      <Input\n                        isRequired\n                        pr=\"4.5rem\"\n                        type={this.state.show ? \"text\" : \"password\"}\n                        placeholder=\"Enter password\"\n                        name=\"password\"\n                        value={this.state.password}\n                        onChange={this.handleInputChangeFor(\"password\")}\n                      />\n                      <InputRightElement width=\"4.5rem\">\n                        <Button\n                          variantColor=\"gray\"\n                          color=\"gray.800\"\n                          h=\"1.75rem\"\n                          size=\"sm\"\n                          onClick={this.handleShowClick}\n                        >\n                          {this.state.show ? \"Hide\" : \"Show\"}\n                        </Button>\n                      </InputRightElement>\n                    </InputGroup>\n                  </FormLabel>\n                </Stack>\n                <Stack spacing={3} mt={4}>\n                  <Button type=\"submit\" variantColor=\"teal\" color=\"#f5fffa\">\n                    Sign Up\n                  </Button>\n                  <Text>or</Text>\n                  <Button\n                    className=\"btn-signup\"\n                    variantColor=\"\"\n                    variant=\"outline\"\n                    color=\"#f5fffa\"\n                    onClick={() => this.props.history.push(\"/login\")}\n                  >\n                    Return to Login\n                  </Button>\n                  <Button\n                    as=\"a\"\n                    href={`${process.env.REACT_APP_SERVER_URL}/api/auth/facebook/`}\n                    variantColor=\"blue\"\n                    variant=\"solid\"\n                  >\n                    Sign Up With Facebook\n                  </Button>\n                </Stack>\n              </FormControl>\n            </form>\n          </Box>\n        </Box>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(SignUp);\n","// ----- Start of imports -----\n// React Import:\nimport React from \"react\";\n// Chakra UI Imports:\nimport { Box, Alert, AlertIcon, AlertTitle, AlertDescription } from \"@chakra-ui/core\";\n// ----- End of imports -----\n\nconst Unapproved = () => {\n  return (\n    <>\n      <Box w={[\"100%\", \"75%\", \"50%\"]} h=\"100%\">\n        <Alert\n          rounded=\"lg\"\n          status=\"warning\"\n          variant=\"subtle\"\n          flexDirection=\"column\"\n          justifyContent=\"center\"\n          textAlign=\"center\"\n          py={10}\n          my={5}\n        >\n          <AlertIcon size=\"40px\" mr={0} />\n          <AlertTitle my={4} fontSize=\"lg\">\n            Awaiting Approval\n          </AlertTitle>\n          <AlertDescription maxW=\"md\">\n            Your account is waiting to be approved for user privacy reasons.\n            Please contact an administrator to have them confirm your status\n            as a member of Turtle Mountain Connect.\n          </AlertDescription>\n        </Alert>\n      </Box>\n    </>\n  );\n};\n\nexport default Unapproved;\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Signin from \"../../Pages/Login/Login\";\nimport Signup from \"../../Pages/SignUp/SignUp\";\nimport Unapproved from \"../Unapproved/Unapproved\";\n\n// A Custom Wrapper Component -- This will keep our code DRY.\n// Responsible for watching redux state, and returning an appropriate component\n// API for this component is the same as a regular route\n\n// THIS IS NOT SECURITY! That must be done on the server\n// A malicious user could change the code and see any view\n// so your server-side route must implement real security\n// by checking req.isAuthenticated for authentication\n// and by checking req.user for authorization\n\nexport const ProtectedRoute = (props) => {\n  // Using destructuring, this takes ComponentToProtect from component\n  // prop and grabs all other props to pass them along to Route\n  const {\n    // Alias prop 'component' as 'ComponentToProtect'\n    component: ComponentToProtect,\n    user,\n    loginMode,\n    ...otherProps\n  } = props;\n\n  let ComponentToShow;\n\n  if (user.id) {\n    if (user.is_approved) {\n      ComponentToShow = ComponentToProtect;\n    } else {\n      ComponentToShow = Unapproved;\n    }\n    // if the user is logged in (only logged in users have ids)\n    // show the component that is protected\n  } else if (loginMode === \"login\") {\n    // if they are not logged in, check the loginMode on Redux State\n    // if the mode is 'login', show the SigninPage\n    ComponentToShow = Signin;\n  } else {\n    // the the user is not logged in and the mode is not 'login'\n    // show the RegisterPage\n    ComponentToShow = Signup;\n  }\n\n  // We return a Route component that gets added to our list of routes\n  return (\n    <Route\n      // all props like 'exact' and 'path' that were passed in\n      // are now passed along to the 'Route' Component\n      {...otherProps}\n      component={ComponentToShow}\n    />\n  );\n};\n\n// Instead of taking everything from state, we just want the user and loginMode\n// to determine which page we should show the user\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({ user, loginMode }) => ({ user, loginMode });\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n    loginMode: state.loginMode,\n  };\n};\n\nexport default connect(mapStateToProps)(ProtectedRoute);\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router\";\nimport { Box, Button, SimpleGrid, Text, Flex } from \"@chakra-ui/core\";\nimport { Icon } from \"@chakra-ui/core\";\n\nclass Home extends Component {\n  render() {\n    const { history } = this.props;\n    return (\n      <Box>\n        {/* Start of Tasks Button */}\n        <Flex justify=\"center\" align=\"center\">\n          <Button\n            m={30}\n            height=\"160px\"\n            width=\"160px\"\n            rounded=\"50%\"\n            variant=\"solid\"\n            variantColor=\"tmarBlack\"\n            bg=\"tmarBlack.800\"\n            onClick={() => history.push(\"/tasks\")}\n          >\n            <Flex\n              justifyContent=\"center\"\n              alignContent=\"center\"\n              direction=\"column\"\n            >\n              <Box mt={1}>\n                <Icon name=\"warning\" size=\"3.5rem\" color=\"red.500\" />\n              </Box>\n              <Box>\n                <Text as=\"h4\" color=\"white\" textTransform=\"uppercase\" mt={4}>\n                  tasks\n                </Text>\n              </Box>\n            </Flex>\n          </Button>\n        </Flex>\n        {/* End of Tasks Button */}\n        <SimpleGrid columns={[1, null, 3]}>\n          {/* Start of Policies Button */}\n          <Flex justify=\"center\" align=\"center\">\n            <Button\n              m={30}\n              height=\"160px\"\n              width=\"160px\"\n              rounded=\"50%\"\n              variant=\"solid\"\n              variantColor=\"tmarBlack\"\n              bg=\"tmarBlack.800\"\n              onClick={() => history.push(\"/policies\")}\n            >\n              <Flex\n                justifyContent=\"center\"\n                alignContent=\"center\"\n                direction=\"column\"\n              >\n                <Box mt={1}>\n                  <Icon name=\"info\" size=\"3.5rem\" color=\"blue.200\" />\n                </Box>\n                <Box>\n                  <Text as=\"h4\" color=\"white\" textTransform=\"uppercase\" mt={4}>\n                    policies\n                  </Text>\n                </Box>\n              </Flex>\n            </Button>\n          </Flex>\n          {/* End of Policies Button */}\n          {/* Start of Settings Button */}\n          <Flex justify=\"center\" align=\"center\">\n            <Button\n              m={30}\n              height=\"160px\"\n              width=\"160px\"\n              rounded=\"50%\"\n              variant=\"solid\"\n              variantColor=\"tmarBlack\"\n              bg=\"tmarBlack.800\"\n              onClick={() => history.push(\"/info\")}\n            >\n              <Flex\n                justifyContent=\"center\"\n                alignContent=\"center\"\n                direction=\"column\"\n              >\n                <Box mt={1}>\n                  <Icon name=\"settings\" size=\"3.5rem\" color=\"green.300\" />\n                </Box>\n                <Box>\n                  <Text as=\"h4\" color=\"white\" textTransform=\"uppercase\" mt={4}>\n                    Info\n                  </Text>\n                </Box>\n              </Flex>\n            </Button>\n          </Flex>\n          {/* End of Settings Button */}\n          {/* Start of Questions Button */}\n          <Flex justify=\"center\" align=\"center\">\n            <Button\n              m={30}\n              height=\"160px\"\n              width=\"160px\"\n              rounded=\"50%\"\n              variant=\"solid\"\n              variantColor=\"tmarBlack\"\n              bg=\"tmarBlack.800\"\n              onClick={() => history.push(\"/questions\")}\n            >\n              <Flex\n                justifyContent=\"center\"\n                alignContent=\"center\"\n                direction=\"column\"\n              >\n                <Box mt={1}>\n                  <Icon name=\"question\" size=\"3.5rem\" color=\"yellow.300\" />\n                </Box>\n                <Box>\n                  <Text as=\"h4\" color=\"white\" textTransform=\"uppercase\" mt={4}>\n                    questions\n                  </Text>\n                </Box>\n              </Flex>\n            </Button>\n          </Flex>\n          {/* End of Questions Button */}\n        </SimpleGrid>\n        {/* Start of Alerts Button */}\n        <Flex justify=\"center\" align=\"center\">\n          <Button\n            m={30}\n            height=\"160px\"\n            width=\"160px\"\n            rounded=\"50%\"\n            variant=\"solid\"\n            variantColor=\"tmarBlack\"\n            bg=\"tmarBlack.800\"\n            onClick={() => history.push(\"/alerts\")}\n          >\n            <Flex\n              justifyContent=\"center\"\n              alignContent=\"center\"\n              direction=\"column\"\n            >\n              <Box mt={1}>\n                <Icon name=\"bell\" size=\"3.5rem\" color=\"orange.400\" />\n              </Box>\n              <Box>\n                <Text as=\"h4\" color=\"white\" textTransform=\"uppercase\" mt={4}>\n                  alerts\n                </Text>\n              </Box>\n            </Flex>\n          </Button>\n        </Flex>\n        {/* End of Alerts Button */}\n      </Box>\n    );\n  }\n}\n\nexport default withRouter(Home);\n","import React from 'react';\nimport { Box, Badge, Icon } from '@chakra-ui/core';\n\nconst TaskBadge = (props) => {\n  return (\n    <Box flex=\"1\" textAlign=\"right\">\n      <Badge\n        variant=\"subtle\"\n        variantColor={\n          (props.x.status === \"Complete\") ? (\n            \"green\"\n          ) : (\n              (props.x.status === \"In Progress\") ? (\n                \"orange\"\n              ) : (\n                  \"blue\"\n                )\n            )\n        }\n        mb={1}\n        mr={3}\n      >\n        {props.x.status}\n        <Icon\n          size=\"13px\"\n          ml={1}\n          mb={0.5}\n          name={\n            (props.x.status === \"Complete\") ? (\n              \"check\"\n            ) : (\n                (props.x.status === \"In Progress\") ? (\n                  \"time\"\n                ) : (\n                    \"info\"\n                  )\n              )\n          }\n          color={\n            (props.x.status === \"Complete\") ? (\n              \"green\"\n            ) : (\n                (props.x.status === \"In Progress\") ? (\n                  \"orange\"\n                ) : (\n                    \"blue\"\n                  )\n              )\n          }\n        />\n      </Badge>\n    </Box>\n  );\n}\n\nexport default TaskBadge;","import React from \"react\";\nimport { Button } from \"@chakra-ui/core\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router\";\n\nconst AcceptTask = (props) => {\n  return (\n    <>\n      <Button\n        size=\"sm\"\n        rightIcon=\"edit\"\n        variantColor=\"yellow\"\n        className=\"new_class_goes_here\"\n        onClick={async () => {\n          // await props.dispatch({\n          //   type: \"SET_TASK_DETAIL\",\n          //   payload: {\n          //     taskDetail: props.task,\n          //   },\n          // });\n          await props.history.push(\"/edit\");\n        }}\n      >\n        Edit Task\n      </Button>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return { user: state.user };\n};\n\nexport default withRouter(connect(mapStateToProps)(AcceptTask));\n","import React from \"react\";\nimport { Button } from \"@chakra-ui/core\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router\";\nimport Swal from \"sweetalert2\";\n\nconst AcceptTask = (props) => {\n  return (\n    <>\n      <Button\n        ml={2}\n        size=\"sm\"\n        rightIcon=\"delete\"\n        variantColor=\"red\"\n        className=\"new_class_goes_here\"\n        onClick={async () => {\n          Swal.fire({\n            title: \"Confirm\",\n            text: \"Are you 100% committed to deleting this task?\",\n            icon: \"warning\",\n            showCancelButton: true,\n            confirmButtonColor: \"#3085d6\",\n            cancelButtonColor: \"#d33\",\n            confirmButtonText: \"Yes, delete it!\",\n          }).then((result) => {\n            if (result.value) {\n              props.dispatch({\n                type: \"COMPLETE_TASK\",\n                payload: {\n                  task_id: props.task.id,\n                },\n              });\n              props.history.push(\"/open\");\n            }\n          });\n        }}\n      >\n        Delete Task\n      </Button>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return { user: state.user };\n};\n\nexport default withRouter(connect(mapStateToProps)(AcceptTask));\n","import React, { Fragment } from \"react\";\nimport {\n  Button,\n  Box,\n  Tag,\n  TagIcon,\n  TagLabel,\n  ButtonGroup,\n} from \"@chakra-ui/core\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router\";\nimport EditTask from \"./EditTask\";\nimport DeleteTask from \"./DeleteTask\";\nimport moment from \"moment\";\nconst AcceptTask = (props) => {\n  if (props.task.user_id === props.user.id || props.user.is_admin) {\n    return (\n      <>\n        <h3>{props.task.content}</h3>\n\n        <Box flex=\"1\" textAlign=\"left\">\n          <small>\n            <i>\n              Posted at: {moment(props.task.date_posted).format(\"MM/DD/YY LT\")}{\" \"}\n              (By{\" \"}\n              <u>\n                {props.task.first_name} {props.task.last_name}\n              </u>\n              )\n            </i>\n          </small>\n        </Box>\n        {props.tags[0] &&\n          props.tags[0].tagged_users &&\n          props.tags[0].tagged_users.map((x) => <span>@{x} </span>)}\n        <Box my={3}>\n          {props.tags.map((x, i) => (\n            <Fragment key={i}>\n              {x.is_admin ? (\n                <Tag rounded=\"full\" size=\"sm\" variantColor=\"purple\" mr={2}>\n                  <TagIcon icon=\"star\" size=\"10px\" />\n                  <TagLabel>\n                    {x.first_name} {x.last_name}\n                  </TagLabel>\n                </Tag>\n              ) : (\n                <Tag rounded=\"full\" size=\"sm\" variantColor=\"yellow\" mr={2}>\n                  <TagLabel>\n                    {x.first_name} {x.last_name}\n                  </TagLabel>\n                </Tag>\n              )}\n            </Fragment>\n          ))}\n        </Box>\n        <Box textAlign=\"right\" borderTop=\"1px solid #f5fffe\" pt={3} mt={3}>\n          <ButtonGroup>\n            <Button\n              size=\"sm\"\n              rightIcon=\"check\"\n              variantColor=\"green\"\n              className=\"new_class_goes_here\"\n              onClick={async () => {\n                await props.dispatch({\n                  type: \"ACCEPT_TASK\",\n                  payload: {\n                    task_id: props.task.id,\n                  },\n                });\n                await props.history.push(\"/my\");\n              }}\n            >\n              Accept Task\n            </Button>\n            <EditTask task={props.task} />\n            <DeleteTask task={props.task} />\n          </ButtonGroup>\n        </Box>\n      </>\n    );\n  } else {\n    return (\n      <>\n        <h3>{props.task.content}</h3>\n\n        <Box textAlign=\"right\">\n          <Button\n            ml={2}\n            size=\"sm\"\n            rightIcon=\"check\"\n            variantColor=\"green\"\n            className=\"new_class_goes_here\"\n            onClick={async () => {\n              await props.dispatch({\n                type: \"ACCEPT_TASK\",\n                payload: {\n                  task_id: props.task.id,\n                },\n              });\n              await props.dispatch({\n                type: 'ADD_NOTIFICATIONS',\n                payload: {\n                  type: 'accepted a task you created',\n                  preview: props.task.content,\n                  first_name: props.user.first_name,\n                  last_name: props.user.last_name,\n                  is_admin: props.user.is_admin,\n                },\n              });\n              await props.history.push(\"/my\");\n            }}\n          >\n            Accept Task\n          </Button>\n        </Box>\n        {props.tags[0] &&\n          props.tags[0].tagged_users &&\n          props.tags[0].tagged_users.map((x) => <span>@{x} </span>)}\n        <Box>\n          {props.tags.map((x) => (\n            <>\n              {x.is_admin ? (\n                <Tag rounded=\"full\" size=\"sm\" variantColor=\"purple\" mr={2}>\n                  <TagIcon icon=\"star\" />\n                  <TagLabel>\n                    {x.first_name} {x.last_name}\n                  </TagLabel>\n                </Tag>\n              ) : (\n                <Tag rounded=\"full\" size=\"sm\" variantColor=\"yellow\" mr={2}>\n                  <TagLabel>\n                    {x.first_name} {x.last_name}\n                  </TagLabel>\n                </Tag>\n              )}\n            </>\n          ))}\n        </Box>\n      </>\n    );\n  }\n};\n\nconst mapStateToProps = (state) => {\n  return { user: state.user, tags: state.tasks.taskTags };\n};\n\nexport default withRouter(connect(mapStateToProps)(AcceptTask));\n","import React, { Component } from \"react\";\nimport {\n  Accordion,\n  AccordionItem,\n  AccordionHeader,\n  AccordionIcon,\n  AccordionPanel,\n  Box,\n} from \"@chakra-ui/core\";\nimport TaskBadge from \"./TaskBadge\";\nimport AcceptTask from \"./TaskButtons/AcceptTask\";\nimport { connect } from \"react-redux\";\n\nclass OpenTask extends Component {\n  componentDidMount() {\n    this.props.dispatch({ type: \"FETCH_TASKS\" });\n  }\n\n  render() {\n    return (\n      <>\n        <h2>These tasks need to be accepted</h2>\n        <small>to see details, click on the task to expand it</small>\n        <Accordion m={3} className=\"accordion\" allowToggle defaultIndex={[-1]}>\n          {!this.props.tasks.filter((x) => x.status === \"open\")[0] && (\n            <h2>\n              <b>-no tasks to display-</b>\n            </h2>\n          )}\n          {this.props.tasks\n            .filter((x) => x.status === \"open\")\n            .map((x, i) => (\n              <AccordionItem\n                className=\"accordion-item\"\n                key={i}\n                defaultIsOpen=\"False\"\n                onClick={() =>\n                  this.props.dispatch({\n                    type: \"SET_TASK_DETAIL\",\n                    payload: {\n                      taskDetail: x,\n                    },\n                  })\n                }\n              >\n                {({ isExpanded }) => (\n                  <>\n                    <AccordionHeader\n                      className=\"accordion-head\"\n                      _expanded={{ bg: \"#c79e61\", color: \"white\" }}\n                      _hover={{ bg: \"#c79e61\", color: \"white\" }}\n                      onClick={() =>\n                        this.props.dispatch({\n                          type: \"FETCH_TASK_TAGS\",\n                          payload: { task_id: x.id },\n                        })\n                      }\n                    >\n                      <Box flex=\"1\" textAlign=\"left\">\n                        {x.title}\n                      </Box>\n                      <TaskBadge x={x} />\n                      <AccordionIcon />\n                    </AccordionHeader>\n                    <AccordionPanel className=\"apanel\" pb={4}>\n                      <AcceptTask task={x} />\n                    </AccordionPanel>\n                  </>\n                )}\n              </AccordionItem>\n            ))}\n        </Accordion>\n      </>\n    );\n  }\n}\n\n// ----- Start of mapStateToProps function -----\nconst mapStateToProps = (state) => {\n  return {\n    tasks: state.tasks.tasks,\n  };\n};\n// ----- End of mapStateToProps function -----\n\nexport default connect(mapStateToProps)(OpenTask);\n","import React from \"react\";\nimport { Button, Input, Box } from \"@chakra-ui/core\";\nimport { connect } from \"react-redux\";\nimport moment from \"moment\";\nconst CompleteTask = (props) => {\n  return (\n    <div>\n      <h3>{props.task.content}</h3>\n      <Box flex=\"1\" textAlign=\"left\">\n        <small>\n          <i>\n            Posted at: {moment(props.task.date_posted).format(\"MM/DD/YY LT\")}{\" \"}\n            (By {props.task.first_name} {props.task.last_name})\n          </i>\n        </small>\n      </Box>\n      <Box textAlign=\"right\">\n        <Input\n          rounded=\"md\"\n          size=\"sm\"\n          mt={3}\n          placeholder=\"Enter your response...\"\n        />\n        <Button size=\"sm\" rightIcon=\"bell\" variantColor=\"yellow\" mt={3} ml={3}>\n          Send Response\n        </Button>\n        <Button\n          size=\"sm\"\n          rightIcon=\"check\"\n          variantColor=\"green\"\n          mt={3}\n          ml={3}\n          onClick={async () => {\n            await props.dispatch({\n              type: \"COMPLETE_TASK\",\n              payload: {\n                task_id: props.task.id,\n              },\n            });\n          }}\n        >\n          Complete Task\n        </Button>\n      </Box>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return { user: state.user };\n};\n\nexport default connect(mapStateToProps)(CompleteTask);\n","import React, { Component } from \"react\";\nimport CompleteTask from \"./CompleteTask\";\nimport {\n  AccordionPanel,\n  AccordionIcon,\n  Box,\n  AccordionHeader,\n  AccordionItem,\n  Accordion,\n} from \"@chakra-ui/core\";\nimport TaskBadge from \"./TaskBadge\";\nimport { connect } from \"react-redux\";\n\nclass MyTask extends Component {\n  componentDidMount() {\n    this.props.dispatch({ type: \"FETCH_TASKS\" });\n  }\n\n  render() {\n    return (\n      <>\n        <h2>These are the tasks assigned to you</h2>\n        <small>\n          To ask for clarification, type your response, then click the 'send\n          response' button\n        </small>\n        {!this.props.tasks.filter(\n          (x) => x.assigned_to === this.props.user.id\n        )[0] && (\n          <h2>\n            <b>-no tasks to display-</b>\n          </h2>\n        )}\n        {/* the second button will give us this result,\n            after filtering by tasks, assigned to the current user,\n            we map each task to an accordion item with the title being the task title. \n            then feed each task into its own completeTask component*/}\n        <Accordion m={3} className=\"accordion\" allowToggle defaultIndex={[-1]}>\n          {this.props.tasks\n            .filter((x) => {\n              console.log(x.assigned_to, this.props.user.id);\n              return x.assigned_to === this.props.user.id;\n            })\n            .map((x, i) => (\n              <AccordionItem\n                className=\"accordion-item\"\n                key={i}\n                defaultIsOpen=\"False\"\n              >\n                {({ isExpanded }) => (\n                  <>\n                    <AccordionHeader\n                      className=\"accordion-head\"\n                      _expanded={{ bg: \"#c79e61\", color: \"white\" }}\n                      _hover={{ bg: \"#c79e61\", color: \"white\" }}\n                    >\n                      <Box flex=\"1\" textAlign=\"left\">\n                        {x.title}\n                      </Box>\n                      <TaskBadge x={x} />\n                      <AccordionIcon />\n                    </AccordionHeader>\n                    <AccordionPanel className=\"apanel\" pb={4}>\n                      <CompleteTask task={x} />\n                    </AccordionPanel>\n                  </>\n                )}\n              </AccordionItem>\n            ))}\n        </Accordion>\n      </>\n    );\n  }\n}\n\n// ----- Start of mapStateToProps function -----\nconst mapStateToProps = (state) => {\n  return {\n    tasks: state.tasks.tasks,\n    user: state.user,\n  };\n};\n// ----- End of mapStateToProps function -----\n\nexport default connect(mapStateToProps)(MyTask);\n","import React, { Component } from \"react\";\nimport {\n  AccordionPanel,\n  AccordionIcon,\n  AccordionHeader,\n  Box,\n  AccordionItem,\n  Accordion,\n  Input,\n  InputGroup,\n  InputLeftElement,\n  Icon,\n} from \"@chakra-ui/core\";\nimport TaskBadge from \"./TaskBadge\";\nimport { connect } from \"react-redux\";\nimport moment from \"moment\";\n\nclass SearchTask extends Component {\n  state = {\n    searchString: \"\",\n  };\n\n  componentDidMount() {\n    this.props.dispatch({ type: \"FETCH_TASKS\" });\n  }\n\n  render() {\n    return (\n      <>\n        <h3>This page contains an archive of all Tasks</h3>\n        <small>\n          to find a task, start searching for it. You can search by title or\n          content\n        </small>\n        {/* The input will be used to filter the tasks by matching results. it should do this without a button */}\n        <InputGroup m={3} w=\"100%\">\n          <InputLeftElement\n            children={<Icon name=\"search\" color=\"gray.400\" />}\n          />\n          <Input\n            className=\"questions-search\"\n            value={this.state.searchString}\n            onChange={(event) =>\n              this.setState({ searchString: event.target.value })\n            }\n            variant=\"filled\"\n            placeholder=\"Search\"\n          />\n        </InputGroup>\n        {/* the input will give us this result,\n            after filtering search string, we map \n            each task to an accordion item with the\n            title being the task title. and the body being the content, \n            followed by the status of the task*/}\n        <Accordion m={3} className=\"accordion\" allowToggle defaultIndex={[-1]}>\n          {this.props.tasks\n            .filter(\n              (x) =>\n                x.title.includes(this.state.searchString) ||\n                x.content.includes(this.state.searchString) ||\n                x.first_name.includes(this.state.searchString) ||\n                x.last_name.includes(this.state.searchString)\n            )\n            .map((x, i) => (\n              <AccordionItem\n                className=\"accordion-item\"\n                key={i}\n                defaultIsOpen=\"False\"\n              >\n                {({ isExpanded }) => (\n                  <>\n                    <AccordionHeader\n                      className=\"accordion-head\"\n                      _expanded={{ bg: \"#c79e61\", color: \"white\" }}\n                      _hover={{ bg: \"#c79e61\", color: \"white\" }}\n                    >\n                      <Box flex=\"1\" textAlign=\"left\">\n                        {x.title}\n                      </Box>\n                      <TaskBadge x={x} />\n                      <AccordionIcon />\n                    </AccordionHeader>\n                    <AccordionPanel className=\"apanel\" pb={4}>\n                      <Box flex=\"1\" textAlign=\"left\">\n                        {x.content}\n                      </Box>\n                      <Box flex=\"1\" textAlign=\"left\">\n                        <small>\n                          <i>\n                            Posted at:{\" \"}\n                            {moment(x.date_posted).format(\"MM/DD/YY LT\")} (By{\" \"}\n                            {x.first_name} {x.last_name})\n                          </i>\n                        </small>\n                      </Box>\n                      {console.log(x)}\n                    </AccordionPanel>\n                  </>\n                )}\n              </AccordionItem>\n            ))}\n        </Accordion>\n      </>\n    );\n  }\n}\n\n// ----- Start of mapStateToProps function -----\nconst mapStateToProps = (state) => {\n  return {\n    tasks: state.tasks.tasks,\n  };\n};\n// ----- End of mapStateToProps function -----\n\nexport default connect(mapStateToProps)(SearchTask);\n","import React, { Component } from \"react\";\nimport {\n  Input,\n  Button,\n  FormControl,\n  FormLabel,\n  Box,\n  Heading,\n  Textarea,\n  Stack,\n  IconButton,\n  Tag,\n} from \"@chakra-ui/core\";\n\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router\";\nimport Select from \"react-select\";\n\nclass NewTask extends Component {\n  state = {\n    title: \"\",\n    content: \"\",\n    select: [],\n    maxTitle: 50,\n    maxContent: 1000,\n  };\n\n  componentDidMount() {\n    this.props.dispatch({ type: \"FETCH_ALL_USERS\" });\n  }\n\n  handleChange = (event, value, maxChars) => {\n    if (event.target.value.length <= maxChars) {\n      this.setState({\n        [value]: event.target.value,\n      });\n    }\n  };\n\n  handleInputChange = async (event) => {\n    await console.log(event.value);\n    if (this.state.select.length < 8) {\n      await this.setState({ select: [...this.state.select, event.value] });\n    }\n    await console.log(this.state.select);\n  };\n  render() {\n    return (\n      <form\n        onSubmit={async (event) => {\n          event.preventDefault();\n          await this.props.dispatch({\n            type: \"ADD_TASK\",\n            payload: {\n              title: this.state.title,\n              content: this.state.content,\n              user_ids: this.state.select.map((x) => x.id),\n            },\n          });\n          await this.props.dispatch({\n            type: \"ADD_NOTIFICATIONS\",\n            payload: {\n              type: \"tagged you in a task\",\n              preview: this.state.title,\n              first_name: this.props.user.first_name,\n              last_name: this.props.user.last_name,\n              is_admin: this.props.user.is_admin,\n            },\n          });\n          await this.props.history.push(\"/open\");\n        }}\n      >\n        <FormControl textAlign=\"left\" bg=\"#2f2e2e\" p={5} rounded=\"lg\">\n          <Heading color=\"#f5fffe\">New Task</Heading>\n          <FormLabel htmlFor=\"task-title\">Task Title</FormLabel>\n          <Input\n            _focus={{ bg: \"#f5fffe\", border: \"2px solid #3182ce\" }}\n            autoComplete=\"off\"\n            id=\"task-title\"\n            aria-required=\"true\"\n            placeholder=\"Task Title\"\n            onChange={(event) =>\n              this.handleChange(event, \"title\", this.state.maxTitle)\n            }\n            value={this.state.title}\n            variant=\"filled\"\n            isRequired\n          />\n          <Box mb={5}>\n            <small style={{ color: \"white\" }}>\n              Characters: {this.state.title.length}/{this.state.maxTitle}\n            </small>\n          </Box>\n          <FormLabel htmlFor=\"task-body\">Description</FormLabel>\n          <Textarea\n            _focus={{ bg: \"#f5fffe\", border: \"2px solid #3182ce\" }}\n            id=\"task-body\"\n            placeholder=\"Describe the task...\"\n            onChange={(event) =>\n              this.handleChange(event, \"content\", this.state.maxContent)\n            }\n            value={this.state.content}\n            variant=\"filled\"\n            resize=\"vertical\"\n            isRequired\n          />\n          <Box mb={5}>\n            <small style={{ color: \"white\" }}>\n              Characters: {this.state.content.length}/{this.state.maxContent}\n            </small>\n          </Box>\n          <Box\n            rounded=\"md\"\n            style={{ backgroundColor: \"white\" }}\n            px={4}\n            py={2}\n            mb={3}\n          >\n            Users to notify\n            <Stack w=\"fit-content\">\n              {this.state.select.map((x) => (\n                <Tag w=\"auto\" size=\"md\" variantColor=\"purple\" p={1}>\n                  @{x.first_name} {x.last_name}\n                  <Box flex={1} textAlign=\"right\">\n                    <IconButton\n                      variantColor=\"red\"\n                      icon=\"close\"\n                      size=\"xs\"\n                      ml={3}\n                      onClick={() =>\n                        this.setState({\n                          select: this.state.select.filter(\n                            (y) => y.id !== x.id\n                          ),\n                        })\n                      }\n                    />\n                  </Box>\n                </Tag>\n              ))}\n            </Stack>\n          </Box>\n          <small style={{ color: \"#f5fffe\" }}>Select Users to notify</small>\n          <Select\n            placeholder=\"SELECT A USER\"\n            className=\"col-12 col-lg-3\"\n            defaultValue={0}\n            options={this.props.users\n              .filter((x) => {\n                for (let user of this.state.select) {\n                  if (user === x) {\n                    return false;\n                  }\n                }\n                return true;\n              })\n              .map((x) => {\n                return {\n                  label: x.first_name + \" \" + x.last_name,\n                  value: x,\n                  key: x.id,\n                };\n              })}\n            onChange={(event) => {\n              this.handleInputChange(event);\n            }}\n          ></Select>\n          <Box textAlign=\"right\">\n            <Button my={3} type=\"submit\" rightIcon=\"add\" variantColor=\"green\">\n              Add Task\n            </Button>\n          </Box>\n        </FormControl>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return { user: state.user, users: state.users };\n};\n\nexport default withRouter(connect(mapStateToProps)(NewTask));\n","import React, { Component } from \"react\";\nimport {\n  Input,\n  Button,\n  FormControl,\n  FormLabel,\n  Box,\n  Heading,\n  Textarea,\n  Stack,\n  IconButton,\n  Tag,\n} from \"@chakra-ui/core\";\n\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router\";\nimport Select from \"react-select\";\n\nclass EditTaskView extends Component {\n  state = {\n    id: this.props.tasks.taskDetail.taskDetail.id,\n    title: this.props.tasks.taskDetail.taskDetail.title,\n    content: this.props.tasks.taskDetail.taskDetail.content,\n    select: [],\n    maxTitle: 50,\n    maxContent: 1000,\n  };\n\n  componentDidMount() {\n    this.props.dispatch({ type: \"FETCH_ALL_USERS\" });\n    console.log(\"edit task view loaded\");\n    // this.setState({\n    //   title: this.props.tasks.taskDetail.title,\n    // });\n    console.log(JSON.stringify(this.props.tasks.taskDetail.taskDetail.title));\n  }\n\n  handleChange = (event, value, maxChars) => {\n    if (event.target.value.length <= maxChars) {\n      this.setState({\n        [value]: event.target.value,\n      });\n    }\n  };\n\n  handleInputChange = async (event) => {\n    await console.log(event.value);\n    if (this.state.select.length < 8) {\n      await this.setState({ select: [...this.state.select, event.value] });\n    }\n    await console.log(this.state.select);\n  };\n  render() {\n    const { tasks } = this.props;\n\n    return (\n      <form\n        onSubmit={async (event) => {\n          event.preventDefault();\n          await this.props.dispatch({\n            type: \"UPDATE_TASK\",\n            payload: {\n              id: this.state.id,\n              title: this.state.title,\n              content: this.state.content,\n            },\n          });\n          await this.props.history.push(\"/open\");\n        }}\n      >\n        <FormControl textAlign=\"left\" bg=\"#2f2e2e\" p={5} rounded=\"lg\">\n          <Heading color=\"#f5fffe\">Edit Task</Heading>\n          <FormLabel htmlFor=\"task-title\">Task Title</FormLabel>\n          <Input\n            _focus={{ bg: \"#f5fffe\", border: \"2px solid #3182ce\" }}\n            autoComplete=\"off\"\n            id=\"task-title\"\n            aria-required=\"true\"\n            value={this.state.title}\n            onChange={(event) =>\n              this.handleChange(event, \"title\", this.state.maxTitle)\n            }\n            value={this.state.title}\n            variant=\"filled\"\n            isRequired\n          />\n          <Box mb={5}>\n            <small style={{ color: \"white\" }}>\n              Characters: {this.state.title.length}/{this.state.maxTitle}\n            </small>\n          </Box>\n          <FormLabel htmlFor=\"task-body\">Description</FormLabel>\n          <Textarea\n            _focus={{ bg: \"#f5fffe\", border: \"2px solid #3182ce\" }}\n            id=\"task-body\"\n            placeholder=\"Describe the task...\"\n            onChange={(event) =>\n              this.handleChange(event, \"content\", this.state.maxContent)\n            }\n            value={this.state.content}\n            variant=\"filled\"\n            resize=\"vertical\"\n            isRequired\n          />\n          <Box mb={5}>\n            <small style={{ color: \"white\" }}>\n              Characters: {this.state.content.length}/{this.state.maxContent}\n            </small>\n          </Box>\n          <Box\n            rounded=\"md\"\n            style={{ backgroundColor: \"white\" }}\n            px={4}\n            py={2}\n            mb={3}\n          >\n            Users to notify\n            <Stack w=\"fit-content\">\n              {this.state.select.map((x) => (\n                <Tag w=\"auto\" size=\"md\" variantColor=\"purple\" p={1}>\n                  @{x.first_name} {x.last_name}\n                  <Box flex={1} textAlign=\"right\">\n                    <IconButton\n                      variantColor=\"red\"\n                      icon=\"close\"\n                      size=\"xs\"\n                      ml={3}\n                      onClick={() =>\n                        this.setState({\n                          select: this.state.select.filter(\n                            (y) => y.id !== x.id\n                          ),\n                        })\n                      }\n                    />\n                  </Box>\n                </Tag>\n              ))}\n            </Stack>\n          </Box>\n          <small style={{ color: \"#f5fffe\" }}>Select Users to notify</small>\n          <Select\n            placeholder=\"SELECT A USER\"\n            className=\"col-12 col-lg-3\"\n            defaultValue={0}\n            options={this.props.users\n              .filter((x) => {\n                for (let user of this.state.select) {\n                  if (user === x) {\n                    return false;\n                  }\n                }\n                return true;\n              })\n              .map((x) => {\n                return {\n                  label: x.first_name + \" \" + x.last_name,\n                  value: x,\n                  key: x.id,\n                };\n              })}\n            onChange={(event) => {\n              this.handleInputChange(event);\n            }}\n          ></Select>\n          <Box textAlign=\"right\">\n            <Button my={3} type=\"submit\" rightIcon=\"add\" variantColor=\"green\">\n              Update Task\n            </Button>\n          </Box>\n        </FormControl>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return { user: state.user, users: state.users, tasks: state.tasks };\n};\n\nexport default withRouter(connect(mapStateToProps)(EditTaskView));\n","// ----- Start of imports -----\n// React Import:\nimport React, { Component } from \"react\";\n// React Redux Imports:\nimport { connect } from \"react-redux\";\n// Chakra UI Imports:\nimport { Button, Stack, ButtonGroup, Box } from \"@chakra-ui/core\";\n// React Router DOM Imports:\nimport {\n  withRouter,\n  HashRouter as RouterB,\n  Switch,\n  Redirect,\n  NavLink,\n} from \"react-router-dom\";\n// Components Imports:\nimport ProtectedRoute from \"../../Utilities/ProtectedRoute/ProtectedRoute\";\nimport OpenTask from \"./OpenTask\";\nimport MyTask from \"./MyTask\";\nimport SearchTask from \"./SearchTask\";\nimport NewTask from \"./NewTask\";\nimport TaskEditView from \"./TaskEditView\";\n// CSS Import:\nimport \"./TaskPage.css\";\n\n// ----- This is the TaskPage component -----\n// This component is tha main page component for tasks that displays the task for the users.\nexport class TaskPage extends Component {\n  render() {\n    return (\n      <RouterB>\n        <Stack className=\"tasks-content\">\n          <ButtonGroup className=\"tasks-btngrp\">\n            <NavLink activeClassName=\"tasks-nav-active\" to=\"/open\">\n              <Button\n                variant=\"outline\"\n                variantColor=\"blue\"\n                rightIcon=\"info\"\n                m={3}\n              >\n                Open Tasks\n              </Button>\n            </NavLink>\n            <NavLink activeClassName=\"tasks-nav-active\" to=\"/my\">\n              <Button\n                variant=\"outline\"\n                variantColor=\"yellow\"\n                rightIcon=\"star\"\n                m={3}\n              >\n                My Tasks\n              </Button>\n            </NavLink>\n            <NavLink activeClassName=\"tasks-nav-active\" to=\"/search\">\n              <Button\n                variant=\"outline\"\n                variantColor=\"purple\"\n                rightIcon=\"search\"\n                m={3}\n              >\n                Search\n              </Button>\n            </NavLink>\n            <NavLink activeClassName=\"tasks-nav-active\" to=\"/new\">\n              <Button\n                variant=\"outline\"\n                variantColor=\"green\"\n                rightIcon=\"add\"\n                m={3}\n              >\n                New Task\n              </Button>\n            </NavLink>\n          </ButtonGroup>\n          <Box className=\"tasks-routes\">\n            <Redirect from=\"/\" to=\"/open\" />\n            <Switch>\n              <ProtectedRoute exact path=\"/open\" component={OpenTask} />\n              <ProtectedRoute exact path=\"/my\" component={MyTask} />\n              <ProtectedRoute exact path=\"/search\" component={SearchTask} />\n              <ProtectedRoute exact path=\"/new\" component={NewTask} />\n              <ProtectedRoute exact path=\"/edit\" component={TaskEditView} />\n            </Switch>\n          </Box>\n        </Stack>\n      </RouterB>\n    );\n  }\n}\n// ----- End of TaskPage component -----\n\n// ----- Start of mapStateToProps function -----\nconst mapStateToProps = (state) => {\n  return {\n    tasks: state.tasks.tasks,\n    user: state.user,\n    users: state.users,\n  };\n};\n// ----- End of mapStateToProps function -----\n\n// ----- Default export of TaskPage component with router connection, Redux connection that maps to props.\nexport default withRouter(connect(mapStateToProps)(TaskPage));\n","import React, { Component } from \"react\";\nimport { Input, Button, FormControl } from \"@chakra-ui/core\";\nimport { connect } from \"react-redux\";\n\nclass AnswerQuestion extends Component {\n  state = { answer: \"\" };\n  handleChange = (event, value) => {\n    this.setState({\n      [value]: event.target.value,\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <form\n          onSubmit={async (event) => {\n            event.preventDefault();\n            await this.props.dispatch({\n              type: \"ADD_QUESTION_RESPONSE\",\n              payload: {\n                question_id: this.props.question.id,\n                content: this.state.answer,\n              },\n            });\n            await this.props.dispatch({\n              type: \"ADD_NOTIFICATIONS\",\n              payload: {\n                type: \"answered a question you created\",\n                preview: this.props.question.title,\n                first_name: this.props.user.first_name,\n                last_name: this.props.user.last_name,\n                is_admin: this.props.user.is_admin,\n              },\n            });\n            await this.setState({ answer: \"\" });\n          }}\n        >\n          <FormControl isRequired>\n            <Input\n              rounded=\"md\"\n              size=\"sm\"\n              value={this.state.answer}\n              placeholder=\"Enter your answer...\"\n              onChange={(event) => this.handleChange(event, \"answer\")}\n            />\n            <Button\n              size=\"sm\"\n              variantColor=\"green\"\n              rightIcon=\"check\"\n              mt={3}\n              type=\"submit\"\n            >\n              Submit Answer\n          </Button>\n          </FormControl>\n        </form>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n  }\n}\n\nexport default connect(mapStateToProps)(AnswerQuestion);\n","import React from \"react\";\nimport {\n  Button,\n  Box,\n  Tag,\n  TagLabel,\n  TagIcon,\n  Flex,\n  Text,\n} from \"@chakra-ui/core\";\nimport { connect } from \"react-redux\";\nimport moment from \"moment\";\nimport Swal from \"sweetalert2\";\nconst NewQuestion = (props) => {\n  return (\n    <Box\n      borderWidth=\"1px\"\n      rounded=\"lg\"\n      p={2}\n      my={3}\n      style={{ backgroundColor: \"black\" }}\n    >\n      <Flex>\n        {props.response.user.is_admin ? (\n          <Tag rounded=\"full\" size=\"sm\" variantColor=\"purple\" mr={2}>\n            <TagIcon icon=\"star\" size=\"10px\" />\n            <TagLabel>\n              {props.response.user.first_name} {props.response.user.last_name}\n            </TagLabel>\n          </Tag>\n        ) : (\n          <Tag rounded=\"full\" size=\"sm\" variantColor=\"yellow\" mr={2}>\n            <TagLabel>\n              {props.response.user.first_name} {props.response.user.last_name}\n            </TagLabel>\n          </Tag>\n        )}\n        <Text fontSize=\"0.75rem\">\n          <i style={{ verticalAlign: \"sub\" }}>\n            at {moment(props.response.date_posted).format(\"MM/DD/YY LT\")}\n          </i>\n        </Text>\n      </Flex>\n      <Box>{props.response.content}</Box>\n      <Box textAlign=\"right\">\n        {/* {console.log(props.posted_by, props.user.id, props.user.is_admin)} */}\n        {!props.response.verified &&\n          !props.questionVerified &&\n          (props.user.is_admin || props.posted_by === props.user.id) && (\n            <Button\n              size=\"sm\"\n              variantColor=\"blue\"\n              rightIcon=\"check-circle\"\n              onClick={() => {\n                Swal.fire({\n                  title: \"Confirm\",\n                  text:\n                    \"Are you 100% commited to marking this answer as verified?\",\n                  icon: \"warning\",\n                  showCancelButton: true,\n                  confirmButtonColor: \"#3085d6\",\n                  cancelButtonColor: \"#d33\",\n                  confirmButtonText: \"Yes, verify it!\",\n                }).then((result) => {\n                  if (result.value) {\n                    props.dispatch({\n                      type: \"MARK_AS_ANSWER\",\n                      payload: {\n                        id: props.response.id,\n                        question_id: props.response.questionId,\n                      },\n                    });\n                  }\n                });\n              }}\n            >\n              Mark As Verified\n            </Button>\n          )}\n        {props.response.verified && (\n          <Tag rounded=\"full\" size=\"sm\" variantColor=\"blue\">\n            <TagLabel>Verified</TagLabel>\n            <TagIcon icon=\"check-circle\" />\n          </Tag>\n        )}\n      </Box>\n    </Box>\n  );\n};\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n  };\n};\nexport default connect(mapStateToProps)(NewQuestion);\n","import React from 'react';\nimport { Box, Badge, Icon } from '@chakra-ui/core';\n\nconst QuestionBadge = (props) => {\n  return (\n    <Box flex=\"1\" textAlign=\"right\">\n      <Badge\n        variant=\"subtle\"\n        variantColor={\n          (props.x.is_verified) ? (\n            \"green\"\n          ) : (\n              (props.x.is_answered && !props.x.is_verified) ? (\n                \"blue\"\n              ) : (\n                  \"orange\"\n                )\n            )\n        }\n        mb={1}\n        mr={3}\n      >\n        {\n          (props.x.is_verified) ? (\n            \"Answered, Verified\"\n          ) : (\n              (props.x.is_answered && !props.x.is_verified) ? (\n                \"Answered, Unverified\"\n              ) : (\n                  \"Unanswered\"\n                )\n            )\n        }\n        <Icon\n          size=\"13px\"\n          ml={1}\n          mb={0.5}\n          name={\n            (props.x.is_verified) ? (\n              \"check\"\n            ) : (\n                (props.x.is_answered && !props.x.is_verified) ? (\n                  \"question\"\n                ) : (\n                    \"not-allowed\"\n                  )\n              )\n          }\n          color={\n            (props.x.is_verified) ? (\n              \"green\"\n            ) : (\n                (props.x.is_answered && !props.x.is_verified) ? (\n                  \"blue\"\n                ) : (\n                    \"orange\"\n                  )\n              )\n          }\n        />\n      </Badge>\n    </Box>\n  );\n}\n\nexport default QuestionBadge;","import React from \"react\";\nimport { Button } from \"@chakra-ui/core\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router\";\nimport Swal from \"sweetalert2\";\n\nconst AcceptTask = (props) => {\n  return (\n    <>\n      <Button\n        ml={2}\n        size=\"sm\"\n        rightIcon=\"delete\"\n        variantColor=\"red\"\n        className=\"new_class_goes_here\"\n        onClick={async () => {\n          Swal.fire({\n            title: \"Confirm\",\n            text: \"Are you 100% committed to deleting this question?\",\n            icon: \"warning\",\n            showCancelButton: true,\n            confirmButtonColor: \"#3085d6\",\n            cancelButtonColor: \"#d33\",\n            confirmButtonText: \"Yes, delete it!\",\n          }).then((result) => {\n            if (result.value) {\n              props.dispatch({\n                type: \"DELETE_QUESTION\",\n                payload: {\n                  question_id: props.question.id,\n                },\n              });\n              props.history.push(\"/recent\");\n            }\n          });\n        }}\n      >\n        Delete Question\n      </Button>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return { user: state.user };\n};\n\nexport default withRouter(connect(mapStateToProps)(AcceptTask));\n","// ----- Start of imports -----\n// React Import:\nimport React, { Component } from \"react\";\nimport moment from \"moment\";\n// React Redux Imports:\nimport { connect } from \"react-redux\";\nimport {\n  AccordionPanel,\n  AccordionIcon,\n  Box,\n  AccordionHeader,\n  AccordionItem,\n  Accordion,\n  Button,\n} from \"@chakra-ui/core\";\n// Components Imports:\nimport AnswerQuestion from \"./AnswerQuestion\";\nimport Response from \"./Response\";\nimport QuestionBadge from \"./QuestionBadge\";\nimport DeleteQuestion from \"./QuestionButtons/DeleteQuestion\";\n// ----- End of imports -----\n\nclass RecentQuestions extends Component {\n  componentDidMount() {\n    this.props.dispatch({ type: \"FETCH_QUESTIONS\" });\n  }\n  setQuestion = (id) => {\n    this.props.dispatch({\n      type: \"FETCH_QUESTION_RESPONSES\",\n      payload: { question_id: id },\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <h3>Most Recently Asked Questions</h3>\n        <h4>\n          These are the questions that were most recently asked. whether\n          answered or not, they will appear here\n        </h4>\n        <Accordion my={3} className=\"accordion\" allowToggle defaultIndex={[-1]}>\n          {this.props.questions.map((x, i) => (\n            <AccordionItem\n              className=\"accordion-item\"\n              key={i}\n              defaultIsOpen=\"False\"\n            >\n              {({ isExpanded }) => (\n                <>\n                  <AccordionHeader\n                    className=\"accordion-head\"\n                    _expanded={{ bg: \"#c79e61\", color: \"#f5fffe\" }}\n                    _hover={{ bg: \"#c79e61\", color: \"#f5fffe\" }}\n                    onClick={() => this.setQuestion(x.id)}\n                  >\n                    <Box flex=\"1\" textAlign=\"left\">\n                      {x.title}\n                    </Box>\n                    <QuestionBadge x={x} />\n                    <AccordionIcon />\n                  </AccordionHeader>\n                  <AccordionPanel\n                    className=\"apanel\"\n                    wordBreak=\"break-word\"\n                    pb={4}\n                  >\n                    {x.content}\n                    <Box flex=\"1\" textAlign=\"left\">\n                      <small>\n                        <i>\n                          Posted at:{\" \"}\n                          {moment(x.date_posted).format(\"MM/DD/YY LT\")} (By{\" \"}\n                          {x.user.first_name} {x.user.last_name})\n                        </i>\n                      </small>\n                    </Box>\n                    {this.props.user.is_admin &&\n                      (!x.is_frequent ? (\n                        <Box flex=\"1\" textAlign=\"left\">\n                          <Button\n                            onClick={() => {\n                              this.props.dispatch({\n                                type: \"MARK_AS_FREQUENT\",\n                                payload: { question_id: x.id },\n                              });\n                            }}\n                          >\n                            Mark as frequent\n                          </Button>\n                        </Box>\n                      ) : (\n                        <Box flex=\"1\" textAlign=\"left\">\n                          <Button\n                            onClick={() => {\n                              this.props.dispatch({\n                                type: \"MARK_AS_FREQUENT\",\n                                payload: { question_id: x.id },\n                              });\n                            }}\n                          >\n                            Remove from frequent\n                          </Button>\n                        </Box>\n                      ))}\n                    {this.props.user.id === x.user.id && (\n                      <DeleteQuestion question={x} />\n                    )}\n                    <Box m={3}>\n                      <strong>Responses</strong>\n                    </Box>\n                    <Box textAlign=\"right\" m={3}>\n                      {/* This is the button and input field */}\n                      <AnswerQuestion question={x} />\n                    </Box>\n                    <Box m={3}>\n                      {this.props.response.map((y, j) => (\n                        <Response\n                          key={j}\n                          response={y}\n                          questionVerified={x.is_verified}\n                          posted_by={x.userId}\n                        />\n                      ))}\n                    </Box>\n                  </AccordionPanel>\n                </>\n              )}\n            </AccordionItem>\n          ))}\n        </Accordion>\n      </>\n    );\n  }\n}\n\n// ----- Start of mapStateToProps function -----\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n    questions: state.questions.questions,\n    response: state.questions.questionsResponse,\n  };\n};\n// ----- End of mapStateToProps function -----\n\nexport default connect(mapStateToProps)(RecentQuestions);\n","// ----- Start of imports -----\n// React Import:\nimport React, { Component } from \"react\";\nimport moment from \"moment\";\n// React Redux Imports:\nimport { connect } from \"react-redux\";\nimport {\n  AccordionPanel,\n  AccordionIcon,\n  Box,\n  AccordionHeader,\n  AccordionItem,\n  Accordion,\n  Button,\n} from \"@chakra-ui/core\";\n// Components Imports:\nimport AnswerQuestion from \"./AnswerQuestion\";\nimport Response from \"./Response\";\nimport QuestionBadge from \"./QuestionBadge\";\nimport DeleteQuestion from \"./QuestionButtons/DeleteQuestion\";\n// ----- End of imports -----\n\nclass UnansweredQuestions extends Component {\n  componentWillMount() {\n    this.props.dispatch({ type: \"FETCH_QUESTIONS\" });\n  }\n\n  setQuestion = (id) => {\n    this.props.dispatch({\n      type: \"FETCH_QUESTION_RESPONSES\",\n      payload: { question_id: id },\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <h3>\n          These questions are unanswered, and ordered from newest to oldest\n        </h3>\n        {/* I think there is a filter bug in here. I did not change it. When you answer it still appears. The original code was like that as well. - Jake */}\n        <Accordion my={3} className=\"accordion\" allowToggle defaultIndex={[-1]}>\n          {console.log(this.props.questions)}\n          {this.props.questions\n            .filter((x) => !x.is_verified)\n            .map((x, i) => (\n              <AccordionItem\n                className=\"accordion-item\"\n                key={i}\n                defaultIsOpen=\"False\"\n              >\n                {({ isExpanded }) => (\n                  <>\n                    <AccordionHeader\n                      className=\"accordion-head\"\n                      _expanded={{ bg: \"#c79e61\", color: \"white\" }}\n                      _hover={{ bg: \"#c79e61\", color: \"white\" }}\n                      onClick={() => this.setQuestion(x.id)}\n                    >\n                      <Box flex=\"1\" textAlign=\"left\">\n                        {x.title}\n                      </Box>\n                      <QuestionBadge x={x} />\n                      <AccordionIcon />\n                    </AccordionHeader>\n                    <AccordionPanel\n                      className=\"apanel\"\n                      wordBreak=\"break-word\"\n                      pb={4}\n                    >\n                      {x.content}\n                      <Box flex=\"1\" textAlign=\"left\">\n                        <small>\n                          <i>\n                            Posted at:{\" \"}\n                            {moment(x.date_posted).format(\"MM/DD/YY LT\")} (By{\" \"}\n                            {x.user.first_name} {x.user.last_name})\n                          </i>\n                        </small>\n                      </Box>\n                      {this.props.user.is_admin &&\n                        (!x.is_frequent ? (\n                          <Box flex=\"1\" textAlign=\"left\">\n                            <Button\n                              onClick={() => {\n                                this.props.dispatch({\n                                  type: \"MARK_AS_FREQUENT\",\n                                  payload: { question_id: x.id },\n                                });\n                              }}\n                            >\n                              Mark as frequent\n                            </Button>\n                          </Box>\n                        ) : (\n                          <Box flex=\"1\" textAlign=\"left\">\n                            <Button\n                              onClick={() => {\n                                this.props.dispatch({\n                                  type: \"MARK_AS_FREQUENT\",\n                                  payload: { question_id: x.id },\n                                });\n                              }}\n                            >\n                              Remove from frequent\n                            </Button>\n                          </Box>\n                        ))}\n                      {this.props.user.id === x.user.id && (\n                        <DeleteQuestion question={x} />\n                      )}\n                      <Box m={3}>\n                        <strong>Responses</strong>\n                      </Box>\n                      <Box textAlign=\"right\" m={3}>\n                        {/* This is the button and input field */}\n                        <AnswerQuestion question={x} />\n                      </Box>\n                      <Box m={3}>\n                        {this.props.response.map((y, j) => (\n                          <Response\n                            key={j}\n                            response={y}\n                            questionVerified={x.is_verified}\n                            posted_by={x.userId}\n                          />\n                        ))}\n                      </Box>\n                    </AccordionPanel>\n                  </>\n                )}\n              </AccordionItem>\n            ))}\n        </Accordion>\n      </>\n    );\n  }\n}\n\n// ----- Start of mapStateToProps function -----\nconst mapStateToProps = (state) => {\n  return {\n    questions: state.questions.questions,\n    response: state.questions.questionsResponse,\n    user: state.user,\n  };\n};\n// ----- End of mapStateToProps function -----\n\nexport default connect(mapStateToProps)(UnansweredQuestions);\n","// ----- Start of imports -----\n// React Import:\nimport React, { Component } from \"react\";\n// React Redux Imports:\nimport { connect } from \"react-redux\";\nimport moment from \"moment\";\n// Chakra-ui imports:\nimport {\n  Accordion,\n  AccordionHeader,\n  AccordionIcon,\n  AccordionItem,\n  AccordionPanel,\n  Box,\n  Icon,\n  Input,\n  InputGroup,\n  InputLeftElement,\n} from \"@chakra-ui/core\";\n// Components Imports:\nimport QuestionBadge from \"./QuestionBadge\";\n// ----- End of imports -----\n\nclass SearchTask extends Component {\n  state = {\n    searchString: \"\",\n  };\n\n  componentDidMount() {\n    this.props.dispatch({ type: \"FETCH_QUESTIONS\" });\n  }\n\n  render() {\n    return (\n      <>\n        <h3>This page contains an archive of all questions</h3>\n        <small>to find a question, start searching for it</small>\n        {/* The input will be used to filter the tasks by matching results. it should do this without a button */}\n        <InputGroup my={3} w=\"100%\">\n          <InputLeftElement\n            children={<Icon name=\"search\" color=\"gray.400\" />}\n          />\n          <Input\n            className=\"tasks-search\"\n            value={this.state.searchString}\n            onChange={(event) =>\n              this.setState({ searchString: event.target.value })\n            }\n            variant=\"filled\"\n            placeholder=\"Search\"\n          />\n        </InputGroup>\n        {/* the input will give us this result,\n            after filtering search string, we map \n            each task to an accordion item with the\n            title being the task title. and the body being the content, \n            followed by the status of the task*/}\n        <Accordion my={3} className=\"accordion\" allowToggle defaultIndex={[-1]}>\n          {this.props.questions\n            .filter(\n              (x) =>\n                x.title.includes(this.state.searchString) ||\n                x.content.includes(this.state.searchString)\n            )\n            .map((x, i) => (\n              <AccordionItem\n                className=\"accordion-item\"\n                key={i}\n                defaultIsOpen=\"False\"\n              >\n                {({ isExpanded }) => (\n                  <>\n                    <AccordionHeader\n                      className=\"accordion-head\"\n                      _expanded={{ bg: \"#c79e61\", color: \"white\" }}\n                      _hover={{ bg: \"#c79e61\", color: \"white\" }}\n                    >\n                      <Box flex=\"2\" textAlign=\"left\">\n                        {x.title}\n                      </Box>\n                      <QuestionBadge x={x} />\n                      <AccordionIcon />\n                    </AccordionHeader>\n                    <AccordionPanel\n                      className=\"apanel\"\n                      wordBreak=\"break-word\"\n                      pb={4}\n                    >\n                      <Box flex=\"3\" textAlign=\"left\">\n                        {x.content}\n                      </Box>\n                      <Box flex=\"1\" textAlign=\"left\">\n                        <small>\n                          <i>\n                            Posted at:{\" \"}\n                            {moment(x.date_posted).format(\"MM/DD/YY LT\")} (By{\" \"}\n                            {x.user.first_name} {x.user.last_name})\n                          </i>\n                        </small>\n                      </Box>\n                    </AccordionPanel>\n                  </>\n                )}\n              </AccordionItem>\n            ))}\n        </Accordion>\n      </>\n    );\n  }\n}\n\n// ----- Start of mapStateToProps function -----\nconst mapStateToProps = (state) => {\n  return {\n    questions: state.questions.questions,\n  };\n};\n// ----- End of mapStateToProps function -----\n\nexport default connect(mapStateToProps)(SearchTask);\n","// ----- Start of imports -----\n// React Import:\nimport React, { Component } from \"react\";\n// Chakra-ui imports:\nimport {\n  Input,\n  Button,\n  FormControl,\n  FormLabel,\n  Box,\n  Heading,\n  Textarea,\n  IconButton,\n  Tag,\n  Stack,\n} from \"@chakra-ui/core\";\n// React Redux Imports:\nimport { connect } from \"react-redux\";\n// React Select Import:\nimport Select from \"react-select\";\n// ----- End of imports -----\n\nclass NewQuestion extends Component {\n  state = {\n    title: \"\",\n    content: \"\",\n    select: [],\n    maxCharsTitle: 50,\n    maxCharsDesc: 1000,\n  };\n\n  componentDidMount() {\n    this.props.dispatch({ type: \"FETCH_ALL_USERS\" });\n  }\n\n  handleChange = (event, value, maxChars) => {\n    if (event.target.value.length <= maxChars) {\n      this.setState({\n        [value]: event.target.value,\n      });\n    }\n  };\n\n  handleInputChange = async (event) => {\n    await console.log(event.value);\n    if (this.state.select.length < 8) {\n      await this.setState({ select: [...this.state.select, event.value] });\n    }\n    await console.log(this.state.select);\n  };\n\n  render() {\n    return (\n      <>\n        {/* Start of form */}\n        <form\n          onSubmit={async (event) => {\n            event.preventDefault();\n            await this.props.dispatch({\n              type: \"ADD_QUESTION\",\n              payload: {\n                title: this.state.title,\n                content: this.state.content,\n                user_ids: this.state.select.map((x) => x.id),\n              },\n            });\n            await this.props.dispatch({\n              type: \"ADD_NOTIFICATIONS\",\n              payload: {\n                type: \"tagged you in a question\",\n                preview: this.state.title,\n                first_name: this.props.user.first_name,\n                last_name: this.props.user.last_name,\n                is_admin: this.props.user.is_admin,\n              },\n            });\n            await this.props.history.push(\"/recent\");\n          }}\n        >\n          <FormControl textAlign=\"left\" bg=\"#2f2e2e\" p={5} rounded=\"lg\">\n            <Heading color=\"#f5fffe\">New Question</Heading>\n            <FormLabel htmlFor=\"task-title\">Question Title</FormLabel>\n            <Input\n              _focus={{ bg: \"#f5fffe\", border: \"2px solid #3182ce\" }}\n              autoComplete=\"off\"\n              id=\"task-title\"\n              aria-required=\"true\"\n              placeholder=\"Question Title\"\n              onChange={(event) => {\n                this.handleChange(event, \"title\", this.state.maxCharsTitle);\n              }}\n              value={this.state.title}\n              variant=\"filled\"\n              isRequired\n            />\n\n            <Box mb={5}>\n              <small style={{ color: \"white\" }}>\n                Characters: {this.state.title.length}/{this.state.maxCharsTitle}\n              </small>\n            </Box>\n            <FormLabel htmlFor=\"task-body\">Description</FormLabel>\n            <Textarea\n              _focus={{ bg: \"#f5fffe\", border: \"2px solid #3182ce\" }}\n              id=\"task-body\"\n              placeholder=\"Explain the question...\"\n              onChange={(event) => {\n                this.handleChange(event, \"content\", this.state.maxCharsDesc);\n              }}\n              value={this.state.content}\n              variant=\"filled\"\n              resize=\"vertical\"\n              isRequired\n            />\n            <Box mb={5}>\n              <small style={{ color: \"#f5fffe\" }}>\n                Characters: {this.state.content.length}/\n                {this.state.maxCharsDesc}\n              </small>\n            </Box>\n            <Box\n              rounded=\"md\"\n              style={{ backgroundColor: \"#f5fffe\" }}\n              px={4}\n              py={2}\n              mb={3}\n            >\n              Users To Notify\n              <Stack w=\"fit-content\">\n                {this.state.select.map((x) => (\n                  <Tag w=\"auto\" size=\"md\" variantColor=\"purple\" p={1}>\n                    @{x.first_name} {x.last_name}\n                    <Box flex={1} textAlign=\"right\">\n                      <IconButton\n                        variantColor=\"red\"\n                        icon=\"close\"\n                        size=\"xs\"\n                        ml={3}\n                        onClick={() =>\n                          this.setState({\n                            select: this.state.select.filter(\n                              (y) => y.id !== x.id\n                            ),\n                          })\n                        }\n                      />\n                    </Box>\n                  </Tag>\n                ))}\n              </Stack>\n            </Box>\n            <small style={{ color: \"#f5fffe\" }}>Select Users to notify</small>\n            <Select\n              placeholder=\"SELECT A USER\"\n              className=\"col-12 col-lg-3\"\n              defaultValue={0}\n              options={this.props.users\n                .filter((x) => {\n                  for (let user of this.state.select) {\n                    if (user === x) {\n                      return false;\n                    }\n                  }\n                  return true;\n                })\n                .map((x) => {\n                  return {\n                    label: x.first_name + \" \" + x.last_name,\n                    value: x,\n                    key: x.id,\n                  };\n                })}\n              onChange={(event) => {\n                this.handleInputChange(event);\n              }}\n            ></Select>\n            <Box py={3} textAlign=\"right\">\n              <Button type=\"submit\" rightIcon=\"add\" variantColor=\"green\">\n                Add Question\n              </Button>\n            </Box>\n          </FormControl>\n        </form>\n        {/* End of form */}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    users: state.users,\n  };\n};\n\nexport default connect(mapStateToProps)(NewQuestion);\n","// ----- Start of imports -----\n// React Import:\nimport React, { Component } from \"react\";\nimport moment from \"moment\";\n// React Redux Imports:\nimport { connect } from \"react-redux\";\nimport {\n  AccordionPanel,\n  AccordionIcon,\n  Box,\n  AccordionHeader,\n  AccordionItem,\n  Accordion,\n  Button,\n} from \"@chakra-ui/core\";\n// Components Imports:\nimport AnswerQuestion from \"./AnswerQuestion\";\nimport Response from \"./Response\";\nimport QuestionBadge from \"./QuestionBadge\";\nimport DeleteQuestion from \"./QuestionButtons/DeleteQuestion\";\n// ----- End of imports -----\n\nclass UnansweredQuestions extends Component {\n  componentWillMount() {\n    this.props.dispatch({ type: \"FETCH_QUESTIONS\" });\n  }\n\n  setQuestion = (id) => {\n    this.props.dispatch({\n      type: \"FETCH_QUESTION_RESPONSES\",\n      payload: { question_id: id },\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <h3>\n          These questions are unanswered, and ordered from newest to oldest\n        </h3>\n        {/* I think there is a filter bug in here. I did not change it. When you answer it still appears. The original code was like that as well. - Jake */}\n        <Accordion my={3} className=\"accordion\" allowToggle defaultIndex={[-1]}>\n          {console.log(this.props.questions)}\n          {this.props.questions\n            .filter((x) => x.is_frequent)\n            .map((x, i) => (\n              <AccordionItem\n                className=\"accordion-item\"\n                key={i}\n                defaultIsOpen=\"False\"\n              >\n                {({ isExpanded }) => (\n                  <>\n                    <AccordionHeader\n                      className=\"accordion-head\"\n                      _expanded={{ bg: \"#c79e61\", color: \"white\" }}\n                      _hover={{ bg: \"#c79e61\", color: \"white\" }}\n                      onClick={() => this.setQuestion(x.id)}\n                    >\n                      <Box flex=\"1\" textAlign=\"left\">\n                        {x.title}\n                      </Box>\n                      <QuestionBadge x={x} />\n                      <AccordionIcon />\n                    </AccordionHeader>\n                    <AccordionPanel\n                      className=\"apanel\"\n                      wordBreak=\"break-word\"\n                      pb={4}\n                    >\n                      {x.content}\n                      <Box flex=\"1\" textAlign=\"left\">\n                        <small>\n                          <i>\n                            Posted at:{\" \"}\n                            {moment(x.date_posted).format(\"MM/DD/YY LT\")} (By{\" \"}\n                            {x.user.first_name} {x.user.last_name})\n                          </i>\n                        </small>\n                      </Box>\n                      {this.props.user.is_admin &&\n                        (!x.is_frequent ? (\n                          <Box flex=\"1\" textAlign=\"left\">\n                            <Button\n                              onClick={() => {\n                                this.props.dispatch({\n                                  type: \"MARK_AS_FREQUENT\",\n                                  payload: { question_id: x.id },\n                                });\n                              }}\n                            >\n                              Mark as frequent\n                            </Button>\n                          </Box>\n                        ) : (\n                          <Box flex=\"1\" textAlign=\"left\">\n                            <Button\n                              onClick={() => {\n                                this.props.dispatch({\n                                  type: \"MARK_AS_FREQUENT\",\n                                  payload: { question_id: x.id },\n                                });\n                              }}\n                            >\n                              Remove from frequent\n                            </Button>\n                          </Box>\n                        ))}\n                      {this.props.user.id === x.user.id && (\n                        <DeleteQuestion question={x} />\n                      )}\n                      <Box m={3}>\n                        <strong>Responses</strong>\n                      </Box>\n                      <Box textAlign=\"right\" m={3}>\n                        {/* This is the button and input field */}\n                        <AnswerQuestion question={x} />\n                      </Box>\n                      <Box m={3}>\n                        {this.props.response.map((y, j) => (\n                          <Response\n                            key={j}\n                            response={y}\n                            questionVerified={x.is_verified}\n                            posted_by={x.userId}\n                          />\n                        ))}\n                      </Box>\n                    </AccordionPanel>\n                  </>\n                )}\n              </AccordionItem>\n            ))}\n        </Accordion>\n      </>\n    );\n  }\n}\n\n// ----- Start of mapStateToProps function -----\nconst mapStateToProps = (state) => {\n  return {\n    questions: state.questions.questions,\n    response: state.questions.questionsResponse,\n    user: state.user,\n  };\n};\n// ----- End of mapStateToProps function -----\n\nexport default connect(mapStateToProps)(UnansweredQuestions);\n","// ----- Start of imports -----\n// React Import:\nimport React, { Component } from \"react\";\n// React Redux Imports:\nimport { connect } from \"react-redux\";\n// React Router DOM Imports:\nimport {\n  HashRouter as RouterC,\n  Switch,\n  Redirect,\n  NavLink,\n} from \"react-router-dom\";\n// Chakra-ui imports:\nimport { Button, Stack, ButtonGroup, Box } from \"@chakra-ui/core\";\n// Components Imports:\nimport ProtectedRoute from \"../../Utilities/ProtectedRoute/ProtectedRoute\";\nimport RecentQuestions from \"./RecentQuestions\";\nimport UnansweredQuestions from \"./UnansweredQuestions\";\nimport SearchQuestions from \"./SearchQuestions\";\nimport NewQuestion from \"./NewQuestion\";\n// CSS Import:\nimport \"./QuestionPage.css\";\nimport FrequentlyAsked from \"./FrequentlyAsked\";\n// ----- End of imports -----\n\nclass QuestionPage extends Component {\n  state = {\n    filter: 1,\n    searchText: \"\",\n  };\n  componentDidMount() {\n    this.props.dispatch({ type: \"FETCH_QUESTIONS\" });\n  }\n  setQuestion = (id) => {\n    this.props.dispatch({\n      type: \"FETCH_QUESTION_RESPONSES\",\n      payload: { question_id: id },\n    });\n  };\n  render() {\n    return (\n      <RouterC>\n        <Stack className=\"questions-content\">\n          <ButtonGroup className=\"questions-btngrp\">\n            <NavLink activeClassName=\"questions-nav-active\" to=\"/FAQ\">\n              <Button\n                variant=\"outline\"\n                variantColor=\"orange\"\n                rightIcon=\"question-outline\"\n                m={3}\n              >\n                Most Frequent\n              </Button>\n            </NavLink>\n            <NavLink activeClassName=\"questions-nav-active\" to=\"/recent\">\n              <Button\n                variant=\"outline\"\n                variantColor=\"blue\"\n                rightIcon=\"time\"\n                m={3}\n              >\n                Most Recent\n              </Button>\n            </NavLink>\n            <NavLink activeClassName=\"questions-nav-active\" to=\"/unanswered\">\n              <Button\n                variant=\"outline\"\n                variantColor=\"yellow\"\n                rightIcon=\"not-allowed\"\n                m={3}\n              >\n                Unanswered\n              </Button>\n            </NavLink>\n            <NavLink activeClassName=\"questions-nav-active\" to=\"/search\">\n              <Button\n                variant=\"outline\"\n                variantColor=\"purple\"\n                rightIcon=\"search\"\n                m={3}\n              >\n                Search\n              </Button>\n            </NavLink>\n            <NavLink activeClassName=\"questions-nav-active\" to=\"/new\">\n              <Button\n                variant=\"outline\"\n                variantColor=\"green\"\n                rightIcon=\"add\"\n                m={3}\n              >\n                New Question\n              </Button>\n            </NavLink>\n          </ButtonGroup>\n          <Box className=\"questions-routes\">\n            <Redirect from=\"/\" to=\"/recent\" />\n            <Switch>\n              <ProtectedRoute exact path=\"/FAQ\" component={FrequentlyAsked} />\n              <ProtectedRoute\n                exact\n                path=\"/recent\"\n                component={RecentQuestions}\n              />\n              <ProtectedRoute\n                exact\n                path=\"/unanswered\"\n                component={UnansweredQuestions}\n              />\n              <ProtectedRoute\n                exact\n                path=\"/search\"\n                component={SearchQuestions}\n              />\n              <ProtectedRoute exact path=\"/new\" component={NewQuestion} />\n            </Switch>\n          </Box>\n        </Stack>\n      </RouterC>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    questions: state.questions.questions || [],\n    response: state.questions.questionsResponse || [\n      Math.random(),\n      Math.random(),\n    ],\n  };\n};\nexport default connect(mapStateToProps)(QuestionPage);\n","import React from \"react\";\nimport { Button, useToast } from \"@chakra-ui/core\";\nimport { connect } from \"react-redux\";\nimport * as filestack from \"filestack-js\";\n\nconst client = filestack.init(`${process.env.REACT_APP_FILESTACK_KEY}`);\n\nconst Upload = (props) => {\n  const toast = useToast();\n\n  const uploadFiles = async (data) => {\n    await props.dispatch({\n      type: \"UPLOAD_POLICY\",\n      payload: { filename: data.filename, handle: data.handle },\n    });\n  };\n\n  const options = {\n    fromSources: [\"local_file_system\", \"googledrive\", \"facebook\"],\n    onFileUploadFinished: (res) => {\n      uploadFiles({\n        filename: res.filename,\n        handle: res.handle,\n      }).then((res) => {\n        toast({\n          title: \"Uploaded!\",\n          description: \"You successfully uploaded a file.\",\n          status: \"info\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom-right\",\n        });\n      });\n    },\n    onUploadDone: () => {\n      toast({\n        title: \"Done!\",\n        description: \"All files have finished uploading.\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-right\",\n      });\n    },\n    onFileUploadFailed: (res) => {\n      toast({\n        title: \"Failed!\",\n        description: `${res.filename} failed to upload.`,\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-right\",\n      });\n    },\n    minFiles: 1,\n    maxFiles: 5,\n    maxSize: 1 * 1024 * 1024, // 1 MB file size limit\n  };\n\n  return (\n    <>\n      <Button\n        rightIcon=\"add\"\n        variantColor=\"green\"\n        onClick={async () => {\n          await client.picker(options).open();\n        }}\n      >\n        Upload Policy\n      </Button>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return { user: state.user };\n};\n\nexport default connect(mapStateToProps)(Upload);\n","import React from 'react';\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  useDisclosure,\n  Button,\n  AspectRatioBox,\n  Box,\n  IconButton,\n  Flex,\n} from '@chakra-ui/core';\nimport { connect } from 'react-redux';\n\nconst PolicyModal = (props) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      <Button\n        mr={2}\n        rightIcon=\"view\"\n        size=\"sm\"\n        variantColor=\"blue\"\n        onClick={() => onOpen()}\n      >\n        View\n      </Button>\n\n      <Modal onClose={onClose} size=\"full\" isOpen={isOpen}>\n        <ModalOverlay />\n        <ModalContent mb={0}>\n          <ModalHeader p={3}>\n            <Flex>\n              {props.x.filename}\n              <Box flex={1} textAlign=\"right\">\n                <IconButton\n                  variantColor=\"red\"\n                  variant=\"ghost\"\n                  icon=\"close\"\n                  onClick={onClose}\n                />\n              </Box>\n            </Flex>\n          </ModalHeader>\n          <ModalBody>\n            <AspectRatioBox\n              p={3}\n              rounded=\"lg\"\n              border=\"1px solid #2f2e2e\"\n              maxW=\"60%\"\n              mx=\"auto\"\n            >\n              <Box\n                as=\"embed\"\n                title={props.x.filename}\n                src={`https://cdn.filestackcontent.com/${props.x.handle}`}\n              />\n            </AspectRatioBox>\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    </>\n  )\n}\n\nconst mapStateToProps = state => {\n  return {\n    policies: state.policies,\n  }\n}\n\nexport default connect(mapStateToProps)(PolicyModal);","import React, { Component } from 'react';\nimport Upload from './Upload';\nimport { connect } from 'react-redux';\nimport { SimpleGrid, Box, Stack, Text, Button, ButtonGroup, IconButton } from '@chakra-ui/core';\nimport PolicyModal from './PolicyModal';\n\nclass PoliciesPage extends Component {\n  componentDidMount() {\n    this.props.dispatch({ type: 'FETCH_POLICIES' });\n  }\n\n  render() {\n    const { user, policies } = this.props;\n    return (\n      <>\n        <Stack>\n          <h3>This page lists Turtle Mountain Animal Rescue's general policies</h3>\n          <small>Click the \"View\" button to see a policy</small>\n          <small>Admins can upload new policies or delete current ones</small>\n          {\n            user.is_admin ?\n              <Box p={5}>\n                <Upload />\n              </Box>\n              : ''\n          }\n          <SimpleGrid columns={{ sm: 2, md: 3, lg: 4 }}>\n            {\n              policies.map((x) =>\n                <Box\n                  color=\"#f5fffa\"\n                  rounded=\"lg\"\n                  p={3}\n                  m={3}\n                  bg=\"#2f2e2e\"\n                  key={x.id}>\n                  <Stack>\n                    <Text>{x.filename}</Text>\n                    <ButtonGroup>\n                      <PolicyModal x={x} />\n                      <Button rightIcon=\"download\" size=\"sm\" variantColor=\"purple\">\n                        <a\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          href={`https://cdn.filestackcontent.com/${x.handle}`}\n                          download={x.filename}\n                        >\n                          Download\n                        </a>\n                      </Button>\n                      {\n                        user.is_admin ?\n                          <IconButton\n                            variantColor=\"red\"\n                            icon=\"delete\"\n                            size=\"sm\"\n                            onClick={() => {\n                              this.props.dispatch({ type: 'DELETE_POLICY', payload: x.id });\n                            }}\n                          />\n                          : ''\n                      }\n                    </ButtonGroup>\n                  </Stack>\n                </Box>\n              )\n            }\n          </SimpleGrid>\n        </Stack>\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user,\n    policies: state.policies,\n  }\n}\n\nexport default connect(mapStateToProps)(PoliciesPage);","// ----- Start of imports -----\n// React Import:\nimport React from \"react\";\n// React Router DOM Imports:\nimport { NavLink } from \"react-router-dom\";\n// Chakra UI Imports:\nimport { Button } from \"@chakra-ui/core\";\n// CSS Import:\nimport \"./404.css\";\n// ----- End of imports -----\n\nconst fourOhFour = () => {\n  return (\n    <>\n      <div className=\"center\">\n        <div className=\"error\">\n          <div className=\"number\">4</div>\n          <div className=\"illustration\">\n            <div className=\"circle\"></div>\n            <div className=\"clip\">\n              <div className=\"paper\">\n                <div className=\"face\">\n                  <div className=\"eyes\">\n                    <div className=\"eye eye-left\"></div>\n                    <div className=\"eye eye-right\"></div>\n                  </div>\n                  <div className=\"rosyCheeks rosyCheeks-left\"></div>\n                  <div className=\"rosyCheeks rosyCheeks-right\"></div>\n                  <div className=\"mouth\"></div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"number\">4</div>\n        </div>\n        <div className=\"text\">\n          Oops. The page you're looking for doesn't exist.\n        </div>\n        <NavLink to=\"/home\">\n          <Button leftIcon=\"arrow-left\" variantColor=\"green\" m={9} p={9}>\n            Home\n          </Button>\n        </NavLink>\n      </div>\n      <div className=\"by\">\n        Illustration \"Cezan - 404 Page Not Found\" by{\" \"}\n        <a\n          className=\"byLink\"\n          href=\"https://dribbble.com/shots/3965778-Cezan-404-Page-Not-Found\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Masoud Ardestani\n        </a>\n      </div>\n    </>\n  );\n};\n\nexport default fourOhFour;\n","import React from \"react\";\n\nimport {\n  Box,\n  Button,\n  ButtonGroup,\n  Tag,\n  TagLabel,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  useDisclosure\n} from \"@chakra-ui/core\";\nimport { connect } from \"react-redux\";\nconst Incoming = (props) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  return (\n    <Box\n      textAlign=\"right\"\n      rounded=\"lg\"\n      borderWidth=\"1px\"\n      p={2}\n    >\n      <Box\n        as=\"span\"\n        textAlign=\"left\"\n        verticalAlign=\"middle\"\n        ml={3}\n      >\n        <Tag\n          rounded=\"full\"\n          size=\"sm\"\n          variantColor=\"gray\"\n          mr={2}\n        >\n          <TagLabel>{props.user.first_name} {props.user.last_name}</TagLabel>\n        </Tag>\n      </Box>\n      <ButtonGroup ml={3}>\n        <Button\n          size=\"sm\"\n          variantColor=\"green\"\n          rightIcon=\"check\"\n          onClick={onOpen}\n        >\n          Approve\n        </Button>\n        <Button\n          size=\"sm\"\n          variantColor=\"red\"\n          rightIcon=\"close\"\n          onClick={() => {\n            props.dispatch({\n              type: \"DELETE_USER\",\n              payload: props.user.id,\n            });\n          }}\n        >\n          Reject\n        </Button>\n      </ButtonGroup>\n\n      {/* Approve User Modal //////////////////////////////////////////////////////////////////////////////////////// */}\n\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent rounded=\"lg\">\n          <ModalHeader>New User Detected</ModalHeader>\n          <ModalBody>\n            <p>\n              You are about to grant{\" \"}\n              <Tag\n                rounded=\"full\"\n                size=\"sm\"\n                variantColor=\"gray\"\n                mr={2}\n              >\n                <TagLabel>{props.user.first_name} {props.user.last_name}</TagLabel>\n              </Tag>\n                regular access as a member.\n              </p>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button size=\"sm\" mr={3} onClick={onClose}>\n              Cancel\n              </Button>\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              variantColor=\"green\"\n              onClick={() => {\n                onClose();\n                props.dispatch({\n                  type: \"APPROVE_USER\",\n                  payload: props.user.id,\n                });\n              }}\n            >\n              Approve New Member\n              </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </Box>\n  );\n};\n\nexport default connect()(Incoming);\n","import React from \"react\";\nimport {\n  Box,\n  Button,\n  useDisclosure,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  AlertDialog,\n  AlertDialogOverlay,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogBody,\n  AlertDialogFooter,\n  Tag,\n  TagIcon,\n  TagLabel,\n} from \"@chakra-ui/core\";\nimport { connect } from \"react-redux\";\n\nconst Approved = (props) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [isOpenAlert, setIsOpen] = React.useState();\n  const onCloseAlert = () => setIsOpen(false);\n  const cancelRef = React.useRef();\n\n  return (\n    <>\n      <Box\n        textAlign=\"right\"\n        rounded=\"lg\"\n        borderWidth=\"1px\"\n        p={2}\n      >\n        <Box\n          as=\"span\"\n          textAlign=\"left\"\n          verticalAlign=\"middle\"\n          ml={3}\n        >\n          {\n            props.user.is_admin ?\n              <Tag\n                rounded=\"full\"\n                size=\"sm\"\n                variantColor=\"purple\"\n                mr={2}\n              >\n                <TagIcon icon=\"star\" size=\"10px\" />\n                <TagLabel>{props.user.first_name} {props.user.last_name}</TagLabel>\n              </Tag>\n              :\n              <Tag\n                rounded=\"full\"\n                size=\"sm\"\n                variantColor=\"yellow\"\n                mr={2}\n              >\n                <TagLabel>{props.user.first_name} {props.user.last_name}</TagLabel>\n              </Tag>\n          }\n        </Box>\n        <Box as=\"span\" verticalAlign=\"middle\" ml={3}>\n          {!props.user.is_admin ? (\n            <Button\n              size=\"sm\"\n              variantColor=\"purple\"\n              rightIcon=\"star\"\n              onClick={onOpen}\n            >\n              Promote\n            </Button>\n          ) : (\n              <Button\n                size=\"sm\"\n                variantColor=\"yellow\"\n                rightIcon=\"minus\"\n              >\n                Demote\n              </Button>\n            )\n          }\n        </Box>\n        <Box\n          as=\"span\"\n          verticalAlign=\"middle\"\n          ml={3}\n          alignItems=\"right\"\n          justifyContent=\"right\"\n          textAlign=\"right\"\n        >\n          <Button\n            size=\"sm\"\n            variantColor=\"red\"\n            rightIcon=\"close\"\n            onClick={() => setIsOpen(true)}\n          // onClick={() => }\n          >\n            Remove\n          </Button>\n        </Box>\n\n        {/* Delete User Alert /////////////////////////////////////////////////////////////////////////////////////////////*/}\n\n        <>\n          <AlertDialog\n            isOpen={isOpenAlert}\n            leastDestructiveRef={cancelRef}\n            onClose={onClose}\n          >\n            <AlertDialogOverlay />\n            <AlertDialogContent rounded=\"lg\">\n              <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\n                Delete Member\n              </AlertDialogHeader>\n\n              <AlertDialogBody>\n                You are about to remove member{\" \"}\n                {\n                  props.user.is_admin ?\n                    <Tag\n                      rounded=\"full\"\n                      size=\"sm\"\n                      variantColor=\"purple\"\n                      mr={2}\n                    >\n                      <TagIcon icon=\"star\" size=\"10px\" />\n                      <TagLabel>{props.user.first_name} {props.user.last_name}</TagLabel>\n                    </Tag>\n                    :\n                    <Tag\n                      rounded=\"full\"\n                      size=\"sm\"\n                      variantColor=\"yellow\"\n                      mr={2}\n                    >\n                      <TagLabel>{props.user.first_name} {props.user.last_name}</TagLabel>\n                    </Tag>\n                }\n                from Turtle Mountain Connect. This cannot be undone.\n              </AlertDialogBody>\n\n              <AlertDialogFooter>\n                <Button\n                  size=\"sm\"\n                  ref={cancelRef}\n                  onClick={onCloseAlert}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  variantColor=\"red\"\n                  onClick={() => {\n                    onCloseAlert();\n                    props.dispatch({\n                      type: \"DELETE_USER\",\n                      payload: props.user.id,\n                    });\n                  }}\n                  ml={3}\n                >\n                  Delete Member\n                </Button>\n              </AlertDialogFooter>\n            </AlertDialogContent>\n          </AlertDialog>\n        </>\n\n        {/* Promote User Modal ////////////////////////////////////////////////////////////////////////////////////////////*/}\n\n        <Modal isOpen={isOpen} onClose={onClose}>\n          <ModalOverlay />\n          <ModalContent rounded=\"lg\">\n            <ModalHeader>Modify Role</ModalHeader>\n            <ModalBody>\n              <p>\n                You are about to grant member{\" \"}\n                <Tag\n                  rounded=\"full\"\n                  size=\"sm\"\n                  variantColor=\"yellow\"\n                  mr={2}\n                >\n                  <TagLabel>{props.user.first_name} {props.user.last_name}</TagLabel>\n                </Tag>\n                all admin privileges.\n              </p>\n            </ModalBody>\n\n            <ModalFooter>\n              <Button size=\"sm\" mr={3} onClick={onClose}>\n                Cancel\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                variantColor=\"purple\"\n                onClick={() => {\n                  onClose();\n                  props.dispatch({\n                    type: \"PROMOTE_USER\",\n                    payload: props.user.id,\n                  });\n                }}\n              >\n                Promote to Admin\n              </Button>\n            </ModalFooter>\n          </ModalContent>\n        </Modal>\n      </Box>\n    </>\n  );\n};\n\nexport default connect()(Approved);\n","import React from \"react\";\nimport \"./403.css\";\nconst ForeOhThree = (props) => {\n  return (\n    <div className=\"page-body\">\n      <h3>403! Oh, No!</h3>\n      <h4>\n        You're either getting this error because your account is waiting for\n        approval or\n      </h4>\n      you're on a page you shouldn't be on\n      <div className=\"page\">\n        <h1 className=\"page police-tape police-tape--1\">\n          &nbsp;&nbsp;&nbsp;&nbsp;Error:\n          403&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Error:\n          403&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Error:\n          403&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Error:\n          403&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Error:\n          403&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Error:\n          403&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Error: 403\n        </h1>\n        <h1 className=\" page police-tape police-tape--2\">\n          Forbidden&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Forbidden&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Forbidden&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Forbidden&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Forbidden&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Forbidden&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n        </h1>\n      </div>\n    </div>\n  );\n};\nexport default ForeOhThree;\n","import React, { Component } from \"react\";\nimport {\n  Grid,\n  Stack,\n  Tabs,\n  TabList,\n  Tab,\n  TabPanels,\n  TabPanel,\n} from \"@chakra-ui/core\";\nimport { connect } from \"react-redux\";\nimport Incoming from \"./Incoming\";\nimport Approved from \"./Approved\";\nimport ForeOhThree from \"../../Utilities/403/403\";\n\nclass AdminPage extends Component {\n  state = {\n    sortBy: \"incoming\",\n  };\n  componentDidMount() {\n    this.props.dispatch({ type: \"FETCH_ALL_USERS\" });\n  }\n  render() {\n    return (\n      <Stack>\n        <h3>This page allows admins to onboard new volunteers.</h3>\n        <small>Admins may also reject, remove, and promote users.</small>\n        {this.props.user.is_admin ? (\n          <>\n            {/* <Heading as=\"h2\">Members</Heading> */}\n            <Tabs mt={5} isFitted variant=\"line\">\n              <TabList mb={3}>\n                <Tab>User Requests</Tab>\n                <Tab>Approved Users</Tab>\n              </TabList>\n              <TabPanels>\n                <TabPanel>\n                  <Grid templateColumns=\"repeat(1, 1fr)\" gap={3}>\n                    {this.props.users\n                      .filter((x) => !x.is_approved)\n                      .map((x) => (\n                        <Incoming user={x} />\n                      ))}\n                  </Grid>\n                </TabPanel>\n                <TabPanel>\n                  <Grid templateColumns=\"repeat(1, 1fr)\" gap={3}>\n                    {this.props.users\n                      .filter((x) => x.is_approved)\n                      .map((x) => (\n                        <Approved user={x} />\n                      ))}\n                  </Grid>\n                </TabPanel>\n              </TabPanels>\n            </Tabs>\n          </>\n        ) : (\n          <ForeOhThree />\n        )}\n      </Stack>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n    users: state.users || [\n      {\n        first_name: \"Carrie\",\n        last_name: \"Underwood\",\n        id: 2,\n        isApproved: true,\n        isAdmin: true,\n      },\n      { first_name: \"James\", last_name: \"Charles\", id: 3, isApproved: true },\n      { first_name: \"Felix\", last_name: \"Kjellburg\", id: 4 },\n    ],\n  };\n};\nexport default connect(mapStateToProps)(AdminPage);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n  Alert,\n  AlertIcon,\n  Tag,\n  TagIcon,\n  TagLabel,\n  Stack,\n  IconButton,\n  Box,\n  Flex,\n  Badge,\n} from '@chakra-ui/core';\nimport moment from 'moment';\n\nclass Alerts extends Component {\n  componentDidMount() {\n    this.props.dispatch({ type: 'FETCH_NOTIFICATIONS', payload: this.props.user.id });\n  }\n\n  render() {\n    return (\n      <>\n        <Stack my={5} w={[\"100%\", \"100%\", \"85%\", \"65%\"]}>\n          {this.props.notis.map((x, i) =>\n            <Alert my={2} key={i} w=\"100%\" rounded=\"full\" status=\"info\" variant=\"subtle\">\n              <AlertIcon />\n              <Flex>\n                {\n                  x.is_admin ?\n                    <Tag\n                      rounded=\"full\"\n                      size=\"sm\"\n                      variantColor=\"purple\"\n                      mx={2}\n                    >\n                      <TagIcon icon=\"star\" size=\"10px\" />\n                      <TagLabel>{x.first_name} {x.last_name}</TagLabel>\n                    </Tag>\n                    :\n                    <Tag\n                      rounded=\"full\"\n                      size=\"sm\"\n                      variantColor=\"yellow\"\n                      mx={2}\n                    >\n                      <TagLabel>{x.first_name} {x.last_name}</TagLabel>\n                    </Tag>\n                }\n                {/* at {moment(x.date_posted).format(\"MM/DD/YY LT\")} */}\n                <Box>\n                  {x.type}.\n                  <Badge mx={2} variant=\"subtle\">{x.preview}</Badge>\n                  at {moment(x.date_posted).format(\"MM/DD/YY LT\")}\n                </Box>\n              </Flex>\n              <IconButton\n                flex={1}\n                icon=\"close\"\n                rounded=\"full\"\n                position=\"absolute\"\n                right=\"4px\"\n                variant=\"ghost\"\n                variantColor=\"red\"\n                onClick={() => {\n                  console.log(x.id);\n                  this.props.dispatch({ type: 'DELETE_NOTIFICATIONS', payload: x.id });\n                }}\n              />\n            </Alert>\n          )}\n        </Stack>\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n    notis: state.notis,\n  }\n}\n\nexport default connect(mapStateToProps)(Alerts);","import React from \"react\";\nimport {\n  Button,\n  Box,\n  Tag,\n  TagLabel,\n  TagIcon,\n  Flex,\n  Text,\n} from \"@chakra-ui/core\";\nimport moment from \"moment\";\nimport Swal from \"sweetalert2\";\nconst NewQuestion = (props) => {\n  return (\n    <Box\n      borderWidth=\"1px\"\n      rounded=\"lg\"\n      p={2}\n      my={3}\n      style={{ backgroundColor: \"black\" }}\n    >\n      <Flex>\n        {props.response.user.is_admin ? (\n          <Tag rounded=\"full\" size=\"sm\" variantColor=\"purple\" mr={2}>\n            <TagIcon icon=\"star\" size=\"10px\" />\n            <TagLabel>\n              {props.response.user.first_name} {props.response.user.last_name}\n            </TagLabel>\n          </Tag>\n        ) : (\n          <Tag\n            rounded=\"full\"\n            size=\"sm\"\n            variantColor=\"yellow\"\n            mr={2}\n            onClick={() => {\n              Swal.fire({\n                title: \"User Tag\",\n                text:\n                  \"This tag displays the user who posted a task, question, or response\",\n                icon: \"info\",\n                confirmButtonColor: \"#3085d6\",\n                confirmButtonText: \"OK!\",\n              });\n            }}\n          >\n            <TagLabel>\n              {props.response.user.first_name} {props.response.user.last_name}\n            </TagLabel>\n          </Tag>\n        )}\n        <Text fontSize=\"0.75rem\">\n          <i style={{ verticalAlign: \"sub\" }}>\n            at {moment(props.response.date_posted).format(\"MM/DD/YY LT\")}\n          </i>\n        </Text>\n      </Flex>\n      <Box>{props.response.content}</Box>\n      <Box textAlign=\"right\">\n        {!props.verified && !props.questionVerified && (\n          <Button\n            size=\"sm\"\n            variantColor=\"blue\"\n            rightIcon=\"check-circle\"\n            onClick={() => {\n              Swal.fire({\n                title: \"Mark As Verified\",\n                text:\n                  \"When you click this button, it will mark the corresponding response as 'verified'.\\n Only one response can be marked verified for each question.\\n Once there is a 'verified' response, the question will no longer be considered 'unanswered'. Only admins and the person who posted the question will be able to mark an answer 'verified'. For this example, responses will be re-seeded with a verified and unverified answer \",\n\n                icon: \"info\",\n                confirmButtonColor: \"#3085d6\",\n                confirmButtonText: \"OK!\",\n              });\n              props.setVerified(props.index, props.response.content);\n            }}\n          >\n            Mark As Verified\n          </Button>\n        )}\n        {props.verified && (\n          <Tag rounded=\"full\" size=\"sm\" variantColor=\"blue\">\n            <TagLabel>Verified</TagLabel>\n            <TagIcon icon=\"check-circle\" />\n          </Tag>\n        )}\n      </Box>\n    </Box>\n  );\n};\nexport default NewQuestion;\n","import React, { Fragment } from \"react\";\nimport {\n  Button,\n  Box,\n  Tag,\n  TagIcon,\n  TagLabel,\n  ButtonGroup,\n  Input,\n} from \"@chakra-ui/core\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router\";\nimport moment from \"moment\";\nimport Swal from \"sweetalert2\";\nclass AcceptTask extends React.Component {\n  state = {\n    accepted: false,\n    completed: false,\n    task: { first_name: \"Avg\", last_name: \"Joe\", content: this.props.content },\n    tagged_users: [\n      { is_admin: true, first_name: \"Paul\", last_name: \"Lepine\" },\n      { is_admin: false, first_name: \"John\", last_name: \"Doe\" },\n    ],\n  };\n  render() {\n    return (\n      <>\n        <h3>{this.state.task.content}</h3>\n\n        <Box flex=\"1\" textAlign=\"left\">\n          <small>\n            <i>\n              Posted at:{\" \"}\n              {moment(this.state.task.date_posted).format(\"MM/DD/YY LT\")} (By{\" \"}\n              <u>\n                {this.state.task.first_name} {this.state.task.last_name}\n              </u>\n              )\n            </i>\n          </small>\n        </Box>\n        <Box my={3}>\n          {this.state.tagged_users.map((x, i) => (\n            <Fragment key={i}>\n              {x.is_admin ? (\n                <Tag\n                  rounded=\"full\"\n                  size=\"sm\"\n                  variantColor=\"purple\"\n                  mr={2}\n                  onClick={() => {\n                    Swal.fire({\n                      title: \"Administrative user tag\",\n                      text:\n                        \"Administrative users of the app will appear differently when tagged than regular users (Still in the 'first last' format). Their tag will be purple and have a star next to it.\",\n\n                      icon: \"info\",\n                      confirmButtonColor: \"#3085d6\",\n                      confirmButtonText: \"OK!\",\n                    });\n                  }}\n                >\n                  <TagIcon icon=\"star\" size=\"10px\" />\n                  <TagLabel>\n                    {x.first_name} {x.last_name}\n                  </TagLabel>\n                </Tag>\n              ) : (\n                <Tag\n                  rounded=\"full\"\n                  size=\"sm\"\n                  variantColor=\"yellow\"\n                  mr={2}\n                  onClick={() => {\n                    Swal.fire({\n                      title: \"User tag\",\n                      text:\n                        \"Users who have been tagged in a task will appear like this in the format 'first last'. This is so people can easily find tasks that are intended for them specifically.\",\n\n                      icon: \"info\",\n                      confirmButtonColor: \"#3085d6\",\n                      confirmButtonText: \"OK!\",\n                    });\n                  }}\n                >\n                  <TagLabel>\n                    {x.first_name} {x.last_name}\n                  </TagLabel>\n                </Tag>\n              )}\n            </Fragment>\n          ))}\n        </Box>\n        <Box textAlign=\"right\" borderTop=\"1px solid #f5fffe\" pt={3} mt={3}>\n          {this.state.accepted === false ? (\n            <ButtonGroup>\n              <Button\n                size=\"sm\"\n                rightIcon=\"check\"\n                variantColor=\"green\"\n                className=\"new_class_goes_here\"\n                onClick={async () => {\n                  this.setState({ accepted: true });\n                  Swal.fire({\n                    title: \"Accepting a task\",\n                    text:\n                      \"When you accept a task, it will no longer appear on the 'open tasks' board. it will be moved to the 'my tasks' page, where you can either mark it complete or send a notification to the person who posted the task\",\n\n                    icon: \"info\",\n                    confirmButtonColor: \"#3085d6\",\n                    confirmButtonText: \"OK!\",\n                  });\n                }}\n              >\n                Accept Task\n              </Button>\n            </ButtonGroup>\n          ) : (\n            this.state.completed == false && (\n              <Box textAlign=\"right\">\n                <Input\n                  rounded=\"md\"\n                  size=\"sm\"\n                  mt={3}\n                  placeholder=\"Enter your response...\"\n                />\n                <Button\n                  size=\"sm\"\n                  rightIcon=\"bell\"\n                  variantColor=\"yellow\"\n                  mt={3}\n                  ml={3}\n                  onClick={async () => {\n                    Swal.fire({\n                      title: \"Sending a response\",\n                      text:\n                        \"When you click this button, it will send a notification to the person who first posted the task. the notification will contain your name, the title of the task, and your message.\",\n\n                      icon: \"info\",\n                      confirmButtonColor: \"#3085d6\",\n                      confirmButtonText: \"OK!\",\n                    });\n                  }}\n                >\n                  Send Response\n                </Button>\n                <Button\n                  size=\"sm\"\n                  rightIcon=\"check\"\n                  variantColor=\"green\"\n                  mt={3}\n                  ml={3}\n                  onClick={() => {\n                    this.setState({ completed: true });\n                    Swal.fire({\n                      title: \"Completing a task\",\n                      text:\n                        \"When you click this button, it will mark the corresponding task as completed.\",\n\n                      icon: \"info\",\n                      confirmButtonColor: \"#3085d6\",\n                      confirmButtonText: \"OK!\",\n                    });\n                  }}\n                >\n                  Complete Task\n                </Button>\n              </Box>\n            )\n          )}\n        </Box>\n      </>\n    );\n  }\n}\n\nexport default AcceptTask;\n","// ----- Start of imports -----\n// React Import:\nimport React, { Component } from \"react\";\nimport moment from \"moment\";\n// React Redux Imports:\nimport {\n  Button,\n  Input,\n  FormControl,\n  Accordion,\n  AccordionHeader,\n  AccordionPanel,\n  AccordionItem,\n  Alert,\n  AlertIcon,\n  Tag,\n  TagIcon,\n  TagLabel,\n  IconButton,\n  Flex,\n  Box,\n  Badge,\n} from \"@chakra-ui/core\";\nimport Response from \"./Response\";\nimport Swal from \"sweetalert2\";\nimport AcceptTask from \"./AcceptTask\";\n// Components Imports:\n// CSS Import:\n// ----- End of imports -----\n\nexport class InfoPage extends Component {\n  state = {\n    answer: \"\",\n    answers: [{ content: \"this is an example response\", verified: false }],\n    questionVerified: false,\n  };\n  handleChange = (event, value) => {\n    this.setState({\n      [value]: event.target.value,\n    });\n  };\n  componentDidMount() {\n    Swal.fire({\n      title: \"Welcome\",\n      text:\n        \"This is our page for you to try out various components of our app. As you click through, you will discover various features of the app. None of what you do on this page will be sent to the server, so feel free to click buttons and send responses. They'll all disappear when you leave the Info Page\",\n      icon: \"info\",\n      confirmButtonColor: \"#3085d6\",\n      confirmButtonText: \"OK!\",\n    });\n  }\n  setVerified = () => {\n    this.setState({\n      answers: [\n        {\n          content:\n            \"this is a verified answer. all other answers will be un-verified\",\n          verified: true,\n        },\n        {\n          content:\n            \"this is an un-verified answer. you cannot set it to verified because there is already a verified answer\",\n          verified: false,\n        },\n      ],\n      questionVerified: true,\n    });\n  };\n  render() {\n    return (\n      <div>\n        <Accordion allowToggle className=\"accordion-item\" defaultIsOpen=\"False\">\n          <AccordionItem>\n            <AccordionHeader\n              onClick={() => {\n                Swal.fire({\n                  title: \"Collapse\",\n                  text:\n                    \"Clicking this toggles whether a menu is collapsed or expanded. only one menu can be expanded at a time\",\n                  icon: \"info\",\n                  confirmButtonColor: \"#3085d6\",\n                  confirmButtonText: \"OK!\",\n                });\n              }}\n              className=\"accordion-head\"\n              _expanded={{ bg: \"#c79e61\", color: \"white\" }}\n              _hover={{ bg: \"#c79e61\", color: \"white\" }}\n            >\n              Question Example\n            </AccordionHeader>\n            <AccordionPanel className=\"apanel\" wordBreak=\"break-word\" pb={4}>\n              This is an example of a question. Questions will be formatted like\n              this\n              {this.state.answers.map((x, i) => (\n                <Response\n                  setVerified={this.setVerified}\n                  questionVerified={this.state.questionVerified}\n                  verified={x.verified}\n                  response={{\n                    date_posted: moment(),\n                    index: i,\n                    content: x.content,\n                    user: { first_name: \"Example\", last_name: \"User\" },\n                  }}\n                ></Response>\n              ))}\n              <form\n                onSubmit={(event) => {\n                  event.preventDefault();\n                  this.setState({\n                    answers: [\n                      ...this.state.answers,\n                      { content: this.state.answer, verified: false },\n                    ],\n                    answer: \"\",\n                  });\n                }}\n              >\n                <Input\n                  isRequired\n                  value={this.state.answer}\n                  onChange={(event) => {\n                    this.setState({ answer: event.target.value });\n                  }}\n                ></Input>\n                <Button variantColor=\"green\" type=\"submit\">\n                  Submit response\n                </Button>\n              </form>\n            </AccordionPanel>\n          </AccordionItem>\n          <AccordionItem>\n            <AccordionHeader\n              onClick={() => {\n                Swal.fire({\n                  title: \"Collapse\",\n                  text:\n                    \"Clicking this toggles whether a menu is collapsed or expanded. only one menu can be expanded at a time\",\n                  icon: \"info\",\n                  confirmButtonColor: \"#3085d6\",\n                  confirmButtonText: \"OK!\",\n                });\n              }}\n              className=\"accordion-head\"\n              _expanded={{ bg: \"#c79e61\", color: \"white\" }}\n              _hover={{ bg: \"#c79e61\", color: \"white\" }}\n            >\n              Task Example\n            </AccordionHeader>\n            <AccordionPanel className=\"apanel\" wordBreak=\"break-word\" pb={4}>\n              This is an example of a task.\n              <form\n                onSubmit={(event) => {\n                  event.preventDefault();\n                  this.setState({\n                    answers: [\n                      ...this.state.answers,\n                      { content: this.state.answer, verified: false },\n                    ],\n                    answer: \"\",\n                  });\n                }}\n              >\n                <AcceptTask task={\"fight me\"} />\n              </form>\n            </AccordionPanel>\n          </AccordionItem>\n          <Alert my={2} w=\"100%\" rounded=\"full\" status=\"info\" variant=\"subtle\">\n            <AlertIcon\n              onClick={() => {\n                Swal.fire({\n                  title: \"Notification\",\n                  text:\n                    \"You will get a notification when someone responds to your question, accepts your task, or responds to your task.\",\n                  icon: \"info\",\n                  confirmButtonColor: \"#3085d6\",\n                  confirmButtonText: \"OK!\",\n                });\n              }}\n            />\n            <Flex\n              onClick={() => {\n                Swal.fire({\n                  title: \"Notification\",\n                  text:\n                    \"You will get a notification when someone responds to your question, accepts your task, or responds to your task.\",\n                  icon: \"info\",\n                  confirmButtonColor: \"#3085d6\",\n                  confirmButtonText: \"OK!\",\n                });\n              }}\n            >\n              <Tag rounded=\"full\" size=\"sm\" variantColor=\"purple\" mx={2}>\n                <TagIcon icon=\"star\" size=\"10px\" />\n                <TagLabel>Jamie Hendricks</TagLabel>\n              </Tag>\n              <Box>\n                Question Response\n                <Badge mx={2} variant=\"subtle\">\n                  Is Jamie Lazy or is it just me?\n                </Badge>\n                <small>{moment().format(\"MM/DD/YY LT\")}</small>\n              </Box>\n            </Flex>\n            <IconButton\n              flex={1}\n              icon=\"close\"\n              rounded=\"full\"\n              position=\"absolute\"\n              right=\"4px\"\n              variant=\"ghost\"\n              variantColor=\"red\"\n              onClick={() => {\n                Swal.fire({\n                  title: \"Delete Notification\",\n                  text:\n                    \"Once you delete a notification, it cannot be undone. be careful\",\n                  icon: \"info\",\n                  confirmButtonColor: \"#3085d6\",\n                  confirmButtonText: \"OK!\",\n                });\n              }}\n            />\n          </Alert>\n        </Accordion>\n      </div>\n    );\n  }\n}\nexport default InfoPage;\n","// ----- Start of imports -----\n// React Import:\nimport React from \"react\";\n// Redux Imports:\nimport { connect } from \"react-redux\";\n// React Router DOM Imports:\nimport { Redirect, Route, Switch } from \"react-router-dom\";\n// Protected Route Import:\nimport ProtectedRoute from \"../../Utilities/ProtectedRoute/ProtectedRoute\";\n// Components Imports:\nimport Home from \"../../Pages/Home/Home\";\nimport TaskPage from \"../../Pages/ViewsTask/TaskPage\";\nimport QuestionPage from \"../../Pages/ViewsQuestion/QuestionPage\";\nimport PoliciesPage from \"../../Pages/Policies/PoliciesPage\";\nimport Login from \"../../Pages/Login/Login.jsx\";\nimport SignUp from \"../../Pages/SignUp/SignUp.jsx\";\nimport NewQuestion from \"../../Pages/ViewsQuestion/NewQuestion\";\nimport FourOhFour from \"../../Utilities/404/404\";\n// CSS Import:\nimport \"../../App/App.css\";\nimport AdminPage from \"../../Pages/Admin/AdminPage\";\nimport Alerts from \"../../Pages/Alerts/Alerts\";\nimport Info from \"../../Pages/Info/Info\";\n\n// ----- End of imports -----\n\nexport class Content extends React.Component {\n  state = { error: null };\n\n  UNSAFE_componentWillMount() {\n    this.props.dispatch({ type: \"FETCH_USER\" });\n  }\n  render() {\n    return (\n      <div className=\"App-page\">\n        <Switch>\n          {!this.props.user.id ? (\n            <Redirect exact from=\"/\" to=\"/login\" />\n          ) : (\n            <Redirect exact from=\"/\" to=\"/home\" />\n          )}\n          <ProtectedRoute exact path=\"/home\" component={Home} />\n          <Route exact path=\"/login\" component={Login} />\n          <Route exact path=\"/signup\" component={SignUp} />\n          <ProtectedRoute exact path=\"/tasks\" component={TaskPage} />\n          <ProtectedRoute exact path=\"/questions\" component={QuestionPage} />\n          <ProtectedRoute exact path=\"/admin\" component={AdminPage} />\n          <ProtectedRoute exact path=\"/questions/new\" component={NewQuestion} />\n          <ProtectedRoute exact path=\"/policies\" component={PoliciesPage} />\n          <ProtectedRoute exact path=\"/alerts\" component={Alerts} />\n          <ProtectedRoute exact path=\"/info\" component={Info} />\n          <Route render={() => <FourOhFour />} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n    // tasks: state.tasks.tasks,\n  };\n};\nexport default connect(mapStateToProps)(Content);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { useToast } from \"@chakra-ui/core\";\nconst ToastComponent = (props) => {\n  const toast = useToast();\n  return (\n    <div>\n      {props.toast.status &&\n        toast({\n          title: props.toast.status,\n          description: props.toast.message,\n          status: props.toast.status,\n          duration: 5000,\n          isClosable: true,\n        }) &&\n        props.dispatch({ type: \"DELETE_TOAST\" }) &&\n        console.log(\"fuuuuuck\")}\n    </div>\n  );\n};\nconst mapStateToProps = (state) => {\n  return {\n    toast: state.toast,\n  };\n};\n\nexport default connect(mapStateToProps)(ToastComponent);\n","// ----- Start of imports -----\n// React Import:\nimport React from \"react\";\n// Redux Imports:\nimport { connect } from \"react-redux\";\n// React Router DOM Imports:\nimport { BrowserRouter as Router } from \"react-router-dom\";\n// Chakra UI Imports:\nimport { ThemeProvider, CSSReset } from \"@chakra-ui/core\";\n// Custom Chakra theme import:\nimport customTheme from \"../../style/theme\";\n// Components Imports:\nimport Navbar from \"../Layout/Navbar/Navbar\";\nimport Content from \"../Layout/Content/Content\";\nimport ToastComponent from \"../Utilities/ToastComponent/ToastComponent\";\n// CSS Import:\nimport \"./App.css\";\n// ----- End of imports -----\n\nexport class App extends React.Component {\n  state = { error: null };\n\n  UNSAFE_componentWillMount() {\n    this.props.dispatch({ type: \"FETCH_USER\" });\n  }\n\n  render() {\n    return (\n      <ThemeProvider theme={customTheme}>\n        <CSSReset />\n        <Router>\n          <div className=\"App\">\n            <ToastComponent />\n            <Navbar />\n            <Content />\n          </div>\n        </Router>\n      </ThemeProvider>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n    tasks: state.tasks.tasks,\n  };\n};\n\nexport default connect(mapStateToProps)(App);","// ----- Start of imports -----\n// React Import:\nimport React from \"react\";\n// React DOM Imports:\nimport ReactDOM from \"react-dom\";\n// Redux Imports:\nimport { createStore, applyMiddleware } from \"redux\";\n// React Redux Imports:\nimport { Provider } from \"react-redux\";\n// Redux Saga Imports:\nimport createSagaMiddleware from \"redux-saga\";\n// Redux Devtools Extension Imports:\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n// Redux Logger Import:\nimport logger from \"redux-logger\";\n// Redux Reducers and Sagas Imports:\nimport rootReducer from \"./Redux/Reducers\"; // imports ./redux/reducers/index.js\nimport rootSaga from \"./Redux/Sagas\"; // imports ./redux/sagas/index.js\n// Components Imports:\nimport App from \"./Components/App/App\";\n// CSS Import:\nimport \"./index.css\";\n// ----- End of imports -----\n\n// Saga Middleware\nconst sagaMiddleware = createSagaMiddleware();\n\n// this line creates an array of all of redux middleware you want to use\n// we don't want a whole ton of console logs in our production code\n// logger will only be added to your project if your in development mode\nconst middlewareList =\n  process.env.NODE_ENV === \"development\"\n    ? [sagaMiddleware, logger]\n    : [sagaMiddleware];\n\nconst store = createStore(\n  // tells the saga middleware to use the rootReducer\n  // rootSaga contains all of our other reducers\n  rootReducer,\n  // adds all middleware to our project including saga and logger\n  composeWithDevTools(applyMiddleware(...middlewareList))\n);\n\n// tells the saga middleware to use the rootSaga\n// rootSaga contains all of our other sagas\nsagaMiddleware.run(rootSaga);\n\n// This will render the whole app on build\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}